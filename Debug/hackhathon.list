
hackhathon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000067c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000129c  2000000c  080057d8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  080057d8  000072a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115e6  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  00018622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d56  00000000  00000000  0001bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017644  00000000  00000000  0001c85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146c2  00000000  00000000  00033ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997f3  00000000  00000000  00048564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  000e1d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e65dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005784 	.word	0x08005784

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005784 	.word	0x08005784

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <VL6180X_Init>:
 @brief  Initializes VL6180X and check if it is found and resets chip.
 @param  Pointer of i2c
 @returns True if chip found and initialized, False otherwise
 */
/**************************************************************************/
bool VL6180X_Init(I2C_HandleTypeDef *hi2c) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	VL6180X_i2c = hi2c;
 80004d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <VL6180X_Init+0x3c>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6013      	str	r3, [r2, #0]
	_i2caddr = VL6180X_DEFAULT_I2C_ADDR;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <VL6180X_Init+0x40>)
 80004d8:	2252      	movs	r2, #82	@ 0x52
 80004da:	701a      	strb	r2, [r3, #0]

	if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f8c1 	bl	8000664 <read8>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2bb4      	cmp	r3, #180	@ 0xb4
 80004e6:	d001      	beq.n	80004ec <VL6180X_Init+0x24>
		return false;
 80004e8:	2300      	movs	r3, #0
 80004ea:	e006      	b.n	80004fa <VL6180X_Init+0x32>
	}

	// if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) == 0x01) {
	loadSettings();
 80004ec:	f000 f80e 	bl	800050c <loadSettings>
	//}

	write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2016      	movs	r0, #22
 80004f4:	f000 f8e6 	bl	80006c4 <write8>

	return true;
 80004f8:	2301      	movs	r3, #1
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000028 	.word	0x20000028

0800050c <loadSettings>:
/*!
 @brief  Load the settings for proximity/distance ranging
 */
/**************************************************************************/

void loadSettings(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// load settings!

	// private settings from page 24 of app note
	write8(0x0207, 0x01);
 8000510:	2101      	movs	r1, #1
 8000512:	f240 2007 	movw	r0, #519	@ 0x207
 8000516:	f000 f8d5 	bl	80006c4 <write8>
	write8(0x0208, 0x01);
 800051a:	2101      	movs	r1, #1
 800051c:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8000520:	f000 f8d0 	bl	80006c4 <write8>
	write8(0x0096, 0x00);
 8000524:	2100      	movs	r1, #0
 8000526:	2096      	movs	r0, #150	@ 0x96
 8000528:	f000 f8cc 	bl	80006c4 <write8>
	write8(0x0097, 0xfd);
 800052c:	21fd      	movs	r1, #253	@ 0xfd
 800052e:	2097      	movs	r0, #151	@ 0x97
 8000530:	f000 f8c8 	bl	80006c4 <write8>
	write8(0x00e3, 0x00);
 8000534:	2100      	movs	r1, #0
 8000536:	20e3      	movs	r0, #227	@ 0xe3
 8000538:	f000 f8c4 	bl	80006c4 <write8>
	write8(0x00e4, 0x04);
 800053c:	2104      	movs	r1, #4
 800053e:	20e4      	movs	r0, #228	@ 0xe4
 8000540:	f000 f8c0 	bl	80006c4 <write8>
	write8(0x00e5, 0x02);
 8000544:	2102      	movs	r1, #2
 8000546:	20e5      	movs	r0, #229	@ 0xe5
 8000548:	f000 f8bc 	bl	80006c4 <write8>
	write8(0x00e6, 0x01);
 800054c:	2101      	movs	r1, #1
 800054e:	20e6      	movs	r0, #230	@ 0xe6
 8000550:	f000 f8b8 	bl	80006c4 <write8>
	write8(0x00e7, 0x03);
 8000554:	2103      	movs	r1, #3
 8000556:	20e7      	movs	r0, #231	@ 0xe7
 8000558:	f000 f8b4 	bl	80006c4 <write8>
	write8(0x00f5, 0x02);
 800055c:	2102      	movs	r1, #2
 800055e:	20f5      	movs	r0, #245	@ 0xf5
 8000560:	f000 f8b0 	bl	80006c4 <write8>
	write8(0x00d9, 0x05);
 8000564:	2105      	movs	r1, #5
 8000566:	20d9      	movs	r0, #217	@ 0xd9
 8000568:	f000 f8ac 	bl	80006c4 <write8>
	write8(0x00db, 0xce);
 800056c:	21ce      	movs	r1, #206	@ 0xce
 800056e:	20db      	movs	r0, #219	@ 0xdb
 8000570:	f000 f8a8 	bl	80006c4 <write8>
	write8(0x00dc, 0x03);
 8000574:	2103      	movs	r1, #3
 8000576:	20dc      	movs	r0, #220	@ 0xdc
 8000578:	f000 f8a4 	bl	80006c4 <write8>
	write8(0x00dd, 0xf8);
 800057c:	21f8      	movs	r1, #248	@ 0xf8
 800057e:	20dd      	movs	r0, #221	@ 0xdd
 8000580:	f000 f8a0 	bl	80006c4 <write8>
	write8(0x009f, 0x00);
 8000584:	2100      	movs	r1, #0
 8000586:	209f      	movs	r0, #159	@ 0x9f
 8000588:	f000 f89c 	bl	80006c4 <write8>
	write8(0x00a3, 0x3c);
 800058c:	213c      	movs	r1, #60	@ 0x3c
 800058e:	20a3      	movs	r0, #163	@ 0xa3
 8000590:	f000 f898 	bl	80006c4 <write8>
	write8(0x00b7, 0x00);
 8000594:	2100      	movs	r1, #0
 8000596:	20b7      	movs	r0, #183	@ 0xb7
 8000598:	f000 f894 	bl	80006c4 <write8>
	write8(0x00bb, 0x3c);
 800059c:	213c      	movs	r1, #60	@ 0x3c
 800059e:	20bb      	movs	r0, #187	@ 0xbb
 80005a0:	f000 f890 	bl	80006c4 <write8>
	write8(0x00b2, 0x09);
 80005a4:	2109      	movs	r1, #9
 80005a6:	20b2      	movs	r0, #178	@ 0xb2
 80005a8:	f000 f88c 	bl	80006c4 <write8>
	write8(0x00ca, 0x09);
 80005ac:	2109      	movs	r1, #9
 80005ae:	20ca      	movs	r0, #202	@ 0xca
 80005b0:	f000 f888 	bl	80006c4 <write8>
	write8(0x0198, 0x01);
 80005b4:	2101      	movs	r1, #1
 80005b6:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 80005ba:	f000 f883 	bl	80006c4 <write8>
	write8(0x01b0, 0x17);
 80005be:	2117      	movs	r1, #23
 80005c0:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 80005c4:	f000 f87e 	bl	80006c4 <write8>
	write8(0x01ad, 0x00);
 80005c8:	2100      	movs	r1, #0
 80005ca:	f240 10ad 	movw	r0, #429	@ 0x1ad
 80005ce:	f000 f879 	bl	80006c4 <write8>
	write8(0x00ff, 0x05);
 80005d2:	2105      	movs	r1, #5
 80005d4:	20ff      	movs	r0, #255	@ 0xff
 80005d6:	f000 f875 	bl	80006c4 <write8>
	write8(0x0100, 0x05);
 80005da:	2105      	movs	r1, #5
 80005dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80005e0:	f000 f870 	bl	80006c4 <write8>
	write8(0x0199, 0x05);
 80005e4:	2105      	movs	r1, #5
 80005e6:	f240 1099 	movw	r0, #409	@ 0x199
 80005ea:	f000 f86b 	bl	80006c4 <write8>
	write8(0x01a6, 0x1b);
 80005ee:	211b      	movs	r1, #27
 80005f0:	f44f 70d3 	mov.w	r0, #422	@ 0x1a6
 80005f4:	f000 f866 	bl	80006c4 <write8>
	write8(0x01ac, 0x3e);
 80005f8:	213e      	movs	r1, #62	@ 0x3e
 80005fa:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 80005fe:	f000 f861 	bl	80006c4 <write8>
	write8(0x01a7, 0x1f);
 8000602:	211f      	movs	r1, #31
 8000604:	f240 10a7 	movw	r0, #423	@ 0x1a7
 8000608:	f000 f85c 	bl	80006c4 <write8>
	write8(0x0030, 0x00);
 800060c:	2100      	movs	r1, #0
 800060e:	2030      	movs	r0, #48	@ 0x30
 8000610:	f000 f858 	bl	80006c4 <write8>

	// Recommended _ Public registers - See data sheet for more detail
	write8(0x0011, 0x10); // Enables polling for 'New Sample ready' when measurement completes
 8000614:	2110      	movs	r1, #16
 8000616:	2011      	movs	r0, #17
 8000618:	f000 f854 	bl	80006c4 <write8>
	write8(0x010a, 0x30); // Set the averaging sample period (compromise between lower noise and increased execution time)
 800061c:	2130      	movs	r1, #48	@ 0x30
 800061e:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8000622:	f000 f84f 	bl	80006c4 <write8>
	write8(0x003f, 0x46); // Sets the light and dark gain (upper nibble). Dark gain should not be changed.
 8000626:	2146      	movs	r1, #70	@ 0x46
 8000628:	203f      	movs	r0, #63	@ 0x3f
 800062a:	f000 f84b 	bl	80006c4 <write8>
	write8(0x0031, 0xFF); // sets the # of range measurements after which auto calibration of system is performed
 800062e:	21ff      	movs	r1, #255	@ 0xff
 8000630:	2031      	movs	r0, #49	@ 0x31
 8000632:	f000 f847 	bl	80006c4 <write8>
	write8(0x0040, 0x63); // Set ALS integration time to 100ms
 8000636:	2163      	movs	r1, #99	@ 0x63
 8000638:	2040      	movs	r0, #64	@ 0x40
 800063a:	f000 f843 	bl	80006c4 <write8>
	write8(0x002e, 0x01); // perform a single temperature calibration of the ranging sensor
 800063e:	2101      	movs	r1, #1
 8000640:	202e      	movs	r0, #46	@ 0x2e
 8000642:	f000 f83f 	bl	80006c4 <write8>

	// Optional_ Public registers - See data sheet for more detail
	write8(SYSRANGE_INTERMEASUREMENT_PERIOD, 0x09); // Set default ranging inter-measurement period to 100ms
 8000646:	2109      	movs	r1, #9
 8000648:	201b      	movs	r0, #27
 800064a:	f000 f83b 	bl	80006c4 <write8>
	write8(0x003e, 0x31); 	// Set default ALS inter-measurement period to 500ms
 800064e:	2131      	movs	r1, #49	@ 0x31
 8000650:	203e      	movs	r0, #62	@ 0x3e
 8000652:	f000 f837 	bl	80006c4 <write8>
	write8(0x0014, 0x24); // Configures interrupt on 'New Sample Ready threshold event'
 8000656:	2124      	movs	r1, #36	@ 0x24
 8000658:	2014      	movs	r0, #20
 800065a:	f000 f833 	bl	80006c4 <write8>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <read8>:
 @brief  I2C low level interfacing
 */
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t read8(uint16_t address) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	uint8_t pData[2] = { address >> 8, address };
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b29b      	uxth	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	733b      	strb	r3, [r7, #12]
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 2, 10);
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <read8+0x58>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <read8+0x5c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	f107 020c 	add.w	r2, r7, #12
 800068c:	230a      	movs	r3, #10
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2302      	movs	r3, #2
 8000692:	f002 f9ad 	bl	80029f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(VL6180X_i2c, _i2caddr, pData, 1, 10);
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <read8+0x58>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <read8+0x5c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	f107 020c 	add.w	r2, r7, #12
 80006a4:	230a      	movs	r3, #10
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	f002 fa9f 	bl	8002bec <HAL_I2C_Master_Receive>
	data = pData[0];
 80006ae:	7b3b      	ldrb	r3, [r7, #12]
 80006b0:	73fb      	strb	r3, [r7, #15]
	return data;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	20000028 	.word	0x20000028

080006c4 <write8>:
	data |= pData[1];
	return data;
}

// write 1 byte
void write8(uint16_t address, uint8_t data) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	80fb      	strh	r3, [r7, #6]
 80006d0:	4613      	mov	r3, r2
 80006d2:	717b      	strb	r3, [r7, #5]
	uint8_t pData[3] = { address >> 8, address, data };
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	733b      	strb	r3, [r7, #12]
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	737b      	strb	r3, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 3, 10);
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <write8+0x44>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <write8+0x48>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	230a      	movs	r3, #10
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2303      	movs	r3, #3
 80006fc:	f002 f978 	bl	80029f0 <HAL_I2C_Master_Transmit>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000002c 	.word	0x2000002c
 800070c:	20000028 	.word	0x20000028

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fd9d 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f83f 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 faad 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000722:	f000 fa8b 	bl	8000c3c <MX_DMA_Init>
  MX_I2C1_Init();
 8000726:	f000 f8f3 	bl	8000910 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800072a:	f000 fa5d 	bl	8000be8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800072e:	f000 f94b 	bl	80009c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000732:	f000 f9e1 	bl	8000af8 <MX_TIM5_Init>
  MX_I2C2_Init();
 8000736:	f000 f919 	bl	800096c <MX_I2C2_Init>
  MX_ADC1_Init();
 800073a:	f000 f897 	bl	800086c <MX_ADC1_Init>
  MX_TIM3_Init();
 800073e:	f000 f98f 	bl	8000a60 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim3);
 8000742:	4810      	ldr	r0, [pc, #64]	@ (8000784 <main+0x74>)
 8000744:	f003 fe42 	bl	80043cc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000748:	480f      	ldr	r0, [pc, #60]	@ (8000788 <main+0x78>)
 800074a:	f003 fe99 	bl	8004480 <HAL_TIM_Base_Start_IT>
  //start conversion
  uint8_t start_conversion_reg = 0b01100111;
 800074e:	2367      	movs	r3, #103	@ 0x67
 8000750:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, LSM303C_CTRL_REG1_A, 1, &start_conversion_reg, 1, HAL_MAX_DELAY);
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	2220      	movs	r2, #32
 8000764:	213a      	movs	r1, #58	@ 0x3a
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <main+0x7c>)
 8000768:	f002 fc72 	bl	8003050 <HAL_I2C_Mem_Write>
  //initialize distance
  VL6180X_Init(&hi2c2);
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <main+0x80>)
 800076e:	f7ff feab 	bl	80004c8 <VL6180X_Init>
  //DMA ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2048);
 8000772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000776:	4907      	ldr	r1, [pc, #28]	@ (8000794 <main+0x84>)
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <main+0x88>)
 800077a:	f000 fe21 	bl	80013c0 <HAL_ADC_Start_DMA>
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <main+0x6e>
 8000782:	bf00      	nop
 8000784:	200001c8 	.word	0x200001c8
 8000788:	20000180 	.word	0x20000180
 800078c:	200000d8 	.word	0x200000d8
 8000790:	2000012c 	.word	0x2000012c
 8000794:	200002a0 	.word	0x200002a0
 8000798:	20000030 	.word	0x20000030

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ffbe 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <SystemClock_Config+0xc8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a26      	ldr	r2, [pc, #152]	@ (8000864 <SystemClock_Config+0xc8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <SystemClock_Config+0xc8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <SystemClock_Config+0xcc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a20      	ldr	r2, [pc, #128]	@ (8000868 <SystemClock_Config+0xcc>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <SystemClock_Config+0xcc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f92b 	bl	8003a7c <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800082c:	f000 fa8c 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2103      	movs	r1, #3
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fb8d 	bl	8003f6c <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000858:	f000 fa76 	bl	8000d48 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087e:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <MX_ADC1_Init+0x9c>)
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_ADC1_Init+0xa0>)
 8000882:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_ADC1_Init+0x9c>)
 8000886:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_ADC1_Init+0x9c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_ADC1_Init+0x9c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_ADC1_Init+0x9c>)
 800089a:	2200      	movs	r2, #0
 800089c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008a8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008d2:	f000 fd31 	bl	8001338 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80008dc:	f000 fa34 	bl	8000d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_ADC1_Init+0x9c>)
 80008f2:	f000 fe69 	bl	80015c8 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008fc:	f000 fa24 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000030 	.word	0x20000030
 800090c:	40012000 	.word	0x40012000

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <MX_I2C1_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C1_Init+0x50>)
 800091c:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x58>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_I2C1_Init+0x50>)
 800092e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000932:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_I2C1_Init+0x50>)
 800094e:	f001 ff0b 	bl	8002768 <HAL_I2C_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000958:	f000 f9f6 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000d8 	.word	0x200000d8
 8000964:	40005400 	.word	0x40005400
 8000968:	000186a0 	.word	0x000186a0

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C2_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <MX_I2C2_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_I2C2_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_I2C2_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C2_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_I2C2_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_I2C2_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_I2C2_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_I2C2_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_I2C2_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_I2C2_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_I2C2_Init+0x50>)
 80009aa:	f001 fedd 	bl	8002768 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f9c8 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000012c 	.word	0x2000012c
 80009c0:	40005800 	.word	0x40005800
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009fc:	227c      	movs	r2, #124	@ 0x7c
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f003 fc8d 	bl	800432c <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f996 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f003 ff97 	bl	800495c <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f988 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f004 fb2b 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f97a 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000180 	.word	0x20000180

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a84:	2263      	movs	r2, #99	@ 0x63
 8000a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a90:	2231      	movs	r2, #49	@ 0x31
 8000a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa0:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000aa2:	f003 fc43 	bl	800432c <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000aac:	f000 f94c 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000abe:	f003 ff4d 	bl	800495c <HAL_TIM_ConfigClockSource>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000ac8:	f000 f93e 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000acc:	2320      	movs	r3, #32
 8000ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_TIM3_Init+0x90>)
 8000ada:	f004 fae1 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000ae4:	f000 f930 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001c8 	.word	0x200001c8
 8000af4:	40000400 	.word	0x40000400

08000af8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000be4 <MX_TIM5_Init+0xec>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49999;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b30:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000b34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b3e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b50:	4823      	ldr	r0, [pc, #140]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b52:	f003 fbeb 	bl	800432c <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000b5c:	f000 f8f4 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481c      	ldr	r0, [pc, #112]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b6e:	f003 fef5 	bl	800495c <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000b78:	f000 f8e6 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b7c:	4818      	ldr	r0, [pc, #96]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b7e:	f003 fce1 	bl	8004544 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000b88:	f000 f8de 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000b9c:	f004 fa80 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ba6:	f000 f8cf 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	@ 0x60
 8000bac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000bc2:	f003 fe09 	bl	80047d8 <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000bcc:	f000 f8bc 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM5_Init+0xe8>)
 8000bd2:	f000 fa3d 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	@ 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000210 	.word	0x20000210
 8000be4:	40000c00 	.word	0x40000c00

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <MX_USART2_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c20:	f004 fac0 	bl	80051a4 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f88d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000258 	.word	0x20000258
 8000c38:	40004400 	.word	0x40004400

08000c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_DMA_Init+0x3c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <MX_DMA_Init+0x3c>)
 8000c4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_DMA_Init+0x3c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2038      	movs	r0, #56	@ 0x38
 8000c64:	f001 f83b 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c68:	2038      	movs	r0, #56	@ 0x38
 8000c6a:	f001 f854 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd0:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <MX_GPIO_Init+0x84>)
 8000cd2:	f001 fd2f 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_GPIO_Init+0x84>)
 8000cf0:	f001 fb9c 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	first_half_active = first_half_active == 0;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200012a0 	.word	0x200012a0

08000d34 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
		//800Hz
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d157      	bne.n	8000e76 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a2d      	ldr	r2, [pc, #180]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481d      	ldr	r0, [pc, #116]	@ (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000e12:	f001 fb0b 	bl	800242c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5a:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e5c:	f000 ff76 	bl	8001d4c <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e66:	f7ff ff6f 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012000 	.word	0x40012000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	20000078 	.word	0x20000078
 8000e90:	40026410 	.word	0x40026410

08000e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8000f9c <HAL_I2C_MspInit+0x108>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12c      	bne.n	8000f10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a38      	ldr	r2, [pc, #224]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23c0      	movs	r3, #192	@ 0xc0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	482d      	ldr	r0, [pc, #180]	@ (8000fa4 <HAL_I2C_MspInit+0x110>)
 8000eee:	f001 fa9d 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f0e:	e041      	b.n	8000f94 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a24      	ldr	r2, [pc, #144]	@ (8000fa8 <HAL_I2C_MspInit+0x114>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d13c      	bne.n	8000f94 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4814      	ldr	r0, [pc, #80]	@ (8000fa4 <HAL_I2C_MspInit+0x110>)
 8000f54:	f001 fa6a 	bl	800242c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <HAL_I2C_MspInit+0x110>)
 8000f74:	f001 fa5a 	bl	800242c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_I2C_MspInit+0x10c>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	@ 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40005800 	.word	0x40005800

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fbc:	d116      	bne.n	8000fec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f000 fe7d 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fe96 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fea:	e026      	b.n	800103a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_TIM_Base_MspInit+0x9c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10e      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6413      	str	r3, [r2, #64]	@ 0x40
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
}
 8001012:	e012      	b.n	800103a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <HAL_TIM_Base_MspInit+0xa0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10d      	bne.n	800103a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_TIM_Base_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40000400 	.word	0x40000400
 800104c:	40000c00 	.word	0x40000c00

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <HAL_TIM_MspPostInit+0x68>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11d      	bne.n	80010ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_TIM_MspPostInit+0x6c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <HAL_TIM_MspPostInit+0x6c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_TIM_MspPostInit+0x6c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <HAL_TIM_MspPostInit+0x70>)
 80010aa:	f001 f9bf 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40000c00 	.word	0x40000c00
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <HAL_UART_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12b      	bne.n	800113e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_UART_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_UART_MspInit+0x88>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800111e:	230c      	movs	r3, #12
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_UART_MspInit+0x8c>)
 800113a:	f001 f977 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <NMI_Handler+0x4>

0800115c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <MemManage_Handler+0x4>

0800116c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <UsageFault_Handler+0x4>

0800117c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 f8a5 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM2_IRQHandler+0x10>)
 80011ba:	f003 fa1c 	bl	80045f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000180 	.word	0x20000180

080011c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <DMA2_Stream0_IRQHandler+0x10>)
 80011ce:	f000 fec3 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000078 	.word	0x20000078

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001204:	f7ff ffea 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f004 fa85 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fa6d 	bl	8000710 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001244:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8001248:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800124c:	200012a8 	.word	0x200012a8

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	@ (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 fd23 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd64 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd3b 	bl	8001d32 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 fd03 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200012a4 	.word	0x200012a4

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200012a4 	.word	0x200012a4

08001338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e033      	b.n	80013b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fd24 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800137e:	f023 0302 	bic.w	r3, r3, #2
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fa4e 	bl	800182c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a6:	e001      	b.n	80013ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Start_DMA+0x1e>
 80013da:	2302      	movs	r3, #2
 80013dc:	e0ce      	b.n	800157c <HAL_ADC_Start_DMA+0x1bc>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d018      	beq.n	8001426 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001404:	4b5f      	ldr	r3, [pc, #380]	@ (8001584 <HAL_ADC_Start_DMA+0x1c4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a5f      	ldr	r2, [pc, #380]	@ (8001588 <HAL_ADC_Start_DMA+0x1c8>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9a      	lsrs	r2, r3, #18
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001418:	e002      	b.n	8001420 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3b01      	subs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f9      	bne.n	800141a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001434:	d107      	bne.n	8001446 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001444:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 8086 	bne.w	8001562 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001480:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001494:	d106      	bne.n	80014a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f023 0206 	bic.w	r2, r3, #6
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80014a2:	e002      	b.n	80014aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b36      	ldr	r3, [pc, #216]	@ (800158c <HAL_ADC_Start_DMA+0x1cc>)
 80014b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	4a35      	ldr	r2, [pc, #212]	@ (8001590 <HAL_ADC_Start_DMA+0x1d0>)
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c2:	4a34      	ldr	r2, [pc, #208]	@ (8001594 <HAL_ADC_Start_DMA+0x1d4>)
 80014c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <HAL_ADC_Start_DMA+0x1d8>)
 80014cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	334c      	adds	r3, #76	@ 0x4c
 8001502:	4619      	mov	r1, r3
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f000 fcce 	bl	8001ea8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d129      	bne.n	800157a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e020      	b.n	800157a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_ADC_Start_DMA+0x1dc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11b      	bne.n	800157a <HAL_ADC_Start_DMA+0x1ba>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d114      	bne.n	800157a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e00b      	b.n	800157a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	431bde83 	.word	0x431bde83
 800158c:	40012300 	.word	0x40012300
 8001590:	08001a25 	.word	0x08001a25
 8001594:	08001adf 	.word	0x08001adf
 8001598:	08001afb 	.word	0x08001afb
 800159c:	40012000 	.word	0x40012000

080015a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1c>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e113      	b.n	800180c <HAL_ADC_ConfigChannel+0x244>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d925      	bls.n	8001640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1e      	subs	r3, #30
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43da      	mvns	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	400a      	ands	r2, r1
 8001618:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	4603      	mov	r3, r0
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	3b1e      	subs	r3, #30
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e022      	b.n	8001686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	2207      	movs	r2, #7
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4403      	add	r3, r0
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b06      	cmp	r3, #6
 800168c:	d824      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	221f      	movs	r2, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b05      	subs	r3, #5
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d6:	e04c      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d824      	bhi.n	800172a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b23      	subs	r3, #35	@ 0x23
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43da      	mvns	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b23      	subs	r3, #35	@ 0x23
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
 8001728:	e023      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b41      	subs	r3, #65	@ 0x41
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b41      	subs	r3, #65	@ 0x41
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_ADC_ConfigChannel+0x250>)
 8001774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a28      	ldr	r2, [pc, #160]	@ (800181c <HAL_ADC_ConfigChannel+0x254>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d10f      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_ADC_ConfigChannel+0x254>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_ADC_ConfigChannel+0x258>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d003      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x1f4>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d122      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_ADC_ConfigChannel+0x258>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d111      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_ADC_ConfigChannel+0x25c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_ADC_ConfigChannel+0x260>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40012300 	.word	0x40012300
 800181c:	40012000 	.word	0x40012000
 8001820:	10000012 	.word	0x10000012
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001834:	4b79      	ldr	r3, [pc, #484]	@ (8001a1c <ADC_Init+0x1f0>)
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	021a      	lsls	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <ADC_Init+0x1f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00f      	b.n	800192a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0202 	bic.w	r2, r2, #2
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001966:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	035a      	lsls	r2, r3, #13
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800199e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	051a      	lsls	r2, r3, #20
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019e2:	025a      	lsls	r2, r3, #9
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	029a      	lsls	r2, r3, #10
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	0f000001 	.word	0x0f000001

08001a24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d13c      	bne.n	8001ab8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d12b      	bne.n	8001ab0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d127      	bne.n	8001ab0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d119      	bne.n	8001ab0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0220 	bic.w	r2, r2, #32
 8001a8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd75 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ab6:	e00e      	b.n	8001ad6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fd75 	bl	80015b4 <HAL_ADC_ErrorCallback>
}
 8001aca:	e004      	b.n	8001ad6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff f909 	bl	8000d04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	@ 0x40
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fd4a 	bl	80015b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fae2 	bl	8001320 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e099      	b.n	8001e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e00f      	b.n	8001daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fac9 	bl	8001320 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d908      	bls.n	8001daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e078      	b.n	8001e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e8      	bne.n	8001d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_DMA_Init+0x158>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d117      	bne.n	8001e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fa6f 	bl	8002334 <DMA_CheckFifoParam>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa26 	bl	80022c8 <DMA_CalcBaseAndBitshift>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	223f      	movs	r2, #63	@ 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f010803f 	.word	0xf010803f

08001ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_DMA_Start_IT+0x26>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e040      	b.n	8001f50 <HAL_DMA_Start_IT+0xa8>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d12f      	bne.n	8001f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f9b8 	bl	800226c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	223f      	movs	r2, #63	@ 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0216 	orr.w	r2, r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0208 	orr.w	r2, r2, #8
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e005      	b.n	8001f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b8e      	ldr	r3, [pc, #568]	@ (80021a0 <HAL_DMA_IRQHandler+0x248>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	@ (80021a4 <HAL_DMA_IRQHandler+0x24c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808f 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8087 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	223f      	movs	r2, #63	@ 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07e      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e079      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02c      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
 800219e:	bf00      	nop
 80021a0:	20000000 	.word	0x20000000
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e01e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d307      	bcc.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_DMA_IRQHandler+0x2cc>
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	@ 0x40
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b10      	subs	r3, #16
 80022d8:	4a14      	ldr	r2, [pc, #80]	@ (800232c <DMA_CalcBaseAndBitshift+0x64>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e2:	4a13      	ldr	r2, [pc, #76]	@ (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d909      	bls.n	800230a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58
 8002308:	e007      	b.n	800231a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	aaaaaaab 	.word	0xaaaaaaab
 8002330:	080057b4 	.word	0x080057b4

08002334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d856      	bhi.n	8002402 <DMA_CheckFifoParam+0xce>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <DMA_CheckFifoParam+0x28>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	0800237f 	.word	0x0800237f
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002403 	.word	0x08002403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d046      	beq.n	8002406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e043      	b.n	8002406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002386:	d140      	bne.n	800240a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e03d      	b.n	800240a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002396:	d121      	bne.n	80023dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d837      	bhi.n	800240e <DMA_CheckFifoParam+0xda>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <DMA_CheckFifoParam+0x70>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bb 	.word	0x080023bb
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	080023cd 	.word	0x080023cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e030      	b.n	800241c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d025      	beq.n	8002412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ca:	e022      	b.n	8002412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023da:	e01c      	b.n	8002416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d903      	bls.n	80023ea <DMA_CheckFifoParam+0xb6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e8:	e018      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e015      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e00b      	b.n	800241a <DMA_CheckFifoParam+0xe6>
      break;
 8002402:	bf00      	nop
 8002404:	e00a      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e008      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e006      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e004      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;   
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
    }
  } 
  
  return status; 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e159      	b.n	80026fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8148 	bne.w	80026f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a2 	beq.w	80026f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b57      	ldr	r3, [pc, #348]	@ (8002714 <HAL_GPIO_Init+0x2e8>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_GPIO_Init+0x2e8>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b54      	ldr	r3, [pc, #336]	@ (8002714 <HAL_GPIO_Init+0x2e8>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_GPIO_Init+0x2ec>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a49      	ldr	r2, [pc, #292]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x202>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a48      	ldr	r2, [pc, #288]	@ (8002720 <HAL_GPIO_Init+0x2f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x1fe>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a47      	ldr	r2, [pc, #284]	@ (8002724 <HAL_GPIO_Init+0x2f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x1fa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a46      	ldr	r2, [pc, #280]	@ (8002728 <HAL_GPIO_Init+0x2fc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x1f6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a45      	ldr	r2, [pc, #276]	@ (800272c <HAL_GPIO_Init+0x300>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x1f2>
 800261a:	2304      	movs	r3, #4
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800261e:	2307      	movs	r3, #7
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	@ (8002718 <HAL_GPIO_Init+0x2ec>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_GPIO_Init+0x304>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a2f      	ldr	r2, [pc, #188]	@ (8002730 <HAL_GPIO_Init+0x304>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_GPIO_Init+0x304>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <HAL_GPIO_Init+0x304>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a2:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f aea2 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e12b      	b.n	80029d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fb80 	bl	8000e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	@ 0x24
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027cc:	f001 fd86 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 80027d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a81      	ldr	r2, [pc, #516]	@ (80029dc <HAL_I2C_Init+0x274>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d807      	bhi.n	80027ec <HAL_I2C_Init+0x84>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a80      	ldr	r2, [pc, #512]	@ (80029e0 <HAL_I2C_Init+0x278>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e006      	b.n	80027fa <HAL_I2C_Init+0x92>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a7d      	ldr	r2, [pc, #500]	@ (80029e4 <HAL_I2C_Init+0x27c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bf94      	ite	ls
 80027f4:	2301      	movls	r3, #1
 80027f6:	2300      	movhi	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0e7      	b.n	80029d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4a78      	ldr	r2, [pc, #480]	@ (80029e8 <HAL_I2C_Init+0x280>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0c9b      	lsrs	r3, r3, #18
 800280c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a6a      	ldr	r2, [pc, #424]	@ (80029dc <HAL_I2C_Init+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d802      	bhi.n	800283c <HAL_I2C_Init+0xd4>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	e009      	b.n	8002850 <HAL_I2C_Init+0xe8>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	4a69      	ldr	r2, [pc, #420]	@ (80029ec <HAL_I2C_Init+0x284>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	3301      	adds	r3, #1
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	430b      	orrs	r3, r1
 8002856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002862:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	495c      	ldr	r1, [pc, #368]	@ (80029dc <HAL_I2C_Init+0x274>)
 800286c:	428b      	cmp	r3, r1
 800286e:	d819      	bhi.n	80028a4 <HAL_I2C_Init+0x13c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e59      	subs	r1, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fbb1 f3f3 	udiv	r3, r1, r3
 800287e:	1c59      	adds	r1, r3, #1
 8002880:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002884:	400b      	ands	r3, r1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_I2C_Init+0x138>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e59      	subs	r1, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fbb1 f3f3 	udiv	r3, r1, r3
 8002898:	3301      	adds	r3, #1
 800289a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289e:	e051      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028a0:	2304      	movs	r3, #4
 80028a2:	e04f      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <HAL_I2C_Init+0x168>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e012      	b.n	80028f6 <HAL_I2C_Init+0x18e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Init+0x196>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e022      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10e      	bne.n	8002924 <HAL_I2C_Init+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1e58      	subs	r0, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	440b      	add	r3, r1
 8002914:	fbb0 f3f3 	udiv	r3, r0, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002922:	e00f      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	0099      	lsls	r1, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6809      	ldr	r1, [r1, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6911      	ldr	r1, [r2, #16]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	430b      	orrs	r3, r1
 8002986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	000186a0 	.word	0x000186a0
 80029e0:	001e847f 	.word	0x001e847f
 80029e4:	003d08ff 	.word	0x003d08ff
 80029e8:	431bde83 	.word	0x431bde83
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	461a      	mov	r2, r3
 80029fc:	460b      	mov	r3, r1
 80029fe:	817b      	strh	r3, [r7, #10]
 8002a00:	4613      	mov	r3, r2
 8002a02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7fe fc8c 	bl	8001320 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 80e0 	bne.w	8002bd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4970      	ldr	r1, [pc, #448]	@ (8002be4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fdf4 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0d3      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2C_Master_Transmit+0x50>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0cc      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d007      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2221      	movs	r2, #33	@ 0x21
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2210      	movs	r2, #16
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a50      	ldr	r2, [pc, #320]	@ (8002be8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fbc8 	bl	8003244 <I2C_MasterRequestWrite>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e08d      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ad4:	e066      	b.n	8002ba4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 feb2 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06b      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_I2C_Master_Transmit+0x188>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	6a39      	ldr	r1, [r7, #32]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fea9 	bl	80038d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e01a      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d194      	bne.n	8002ad6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000

08002bec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fe fb8e 	bl	8001320 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 8217 	bne.w	8003042 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	497c      	ldr	r1, [pc, #496]	@ (8002e10 <HAL_I2C_Master_Receive+0x224>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fcf6 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e20a      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_I2C_Master_Receive+0x50>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e203      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d007      	beq.n	8002c62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2222      	movs	r2, #34	@ 0x22
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8002e14 <HAL_I2C_Master_Receive+0x228>)
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb4c 	bl	8003348 <I2C_MasterRequestRead>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c4      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d113      	bne.n	8002cea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	623b      	str	r3, [r7, #32]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e198      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d11b      	bne.n	8002d2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e178      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d11b      	bne.n	8002d6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	e158      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d90:	e144      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	f200 80f1 	bhi.w	8002f7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d123      	bne.n	8002dec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fddb 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e145      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dea:	e117      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d14e      	bne.n	8002e92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4906      	ldr	r1, [pc, #24]	@ (8002e18 <HAL_I2C_Master_Receive+0x22c>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fc06 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e11a      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
 8002e0e:	bf00      	nop
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000
 8002e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e90:	e0c4      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	496c      	ldr	r1, [pc, #432]	@ (800304c <HAL_I2C_Master_Receive+0x460>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fbb7 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cb      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4955      	ldr	r1, [pc, #340]	@ (800304c <HAL_I2C_Master_Receive+0x460>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fb89 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e09d      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f7c:	e04e      	b.n	800301c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fcee 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e058      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d124      	bne.n	800301c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f aeb6 	bne.w	8002d92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	@ 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	00010004 	.word	0x00010004

08003050 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800306a:	f7fe f959 	bl	8001320 <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	f040 80d9 	bne.w	8003230 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2319      	movs	r3, #25
 8003084:	2201      	movs	r2, #1
 8003086:	496d      	ldr	r1, [pc, #436]	@ (800323c <HAL_I2C_Mem_Write+0x1ec>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fac1 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
 8003096:	e0cc      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Mem_Write+0x56>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0c5      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d007      	beq.n	80030cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2221      	movs	r2, #33	@ 0x21
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <HAL_I2C_Mem_Write+0x1f0>)
 800310c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310e:	88f8      	ldrh	r0, [r7, #6]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f9e0 	bl	80034e4 <I2C_RequestMemoryWrite>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d052      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e081      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fb86 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x180>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1aa      	bne.n	800312e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fb79 	bl	80038d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e016      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000

08003244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d006      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d003      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800326c:	d108      	bne.n	8003280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00b      	b.n	8003298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	2b12      	cmp	r3, #18
 8003286:	d107      	bne.n	8003298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f9b3 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032be:	d103      	bne.n	80032c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e035      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e01b      	b.n	8003320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	11db      	asrs	r3, r3, #7
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f063 030f 	orn	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <I2C_MasterRequestWrite+0xfc>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f9fc 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e010      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4907      	ldr	r1, [pc, #28]	@ (8003344 <I2C_MasterRequestWrite+0x100>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f9ec 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010008 	.word	0x00010008
 8003344:	00010002 	.word	0x00010002

08003348 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800336c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d006      	beq.n	8003382 <I2C_MasterRequestRead+0x3a>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d003      	beq.n	8003382 <I2C_MasterRequestRead+0x3a>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00b      	b.n	80033ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	2b11      	cmp	r3, #17
 800339a:	d107      	bne.n	80033ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f929 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d2:	d103      	bne.n	80033dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e079      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]
 80033fa:	e05f      	b.n	80034bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	11db      	asrs	r3, r3, #7
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0306 	and.w	r3, r3, #6
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f063 030f 	orn	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4930      	ldr	r1, [pc, #192]	@ (80034dc <I2C_MasterRequestRead+0x194>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f972 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e054      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4929      	ldr	r1, [pc, #164]	@ (80034e0 <I2C_MasterRequestRead+0x198>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f962 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e044      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f8c7 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e017      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	11db      	asrs	r3, r3, #7
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f063 030e 	orn	r3, r3, #14
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4907      	ldr	r1, [pc, #28]	@ (80034e0 <I2C_MasterRequestRead+0x198>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f91e 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00010008 	.word	0x00010008
 80034e0:	00010002 	.word	0x00010002

080034e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2200      	movs	r2, #0
 8003516:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f878 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003534:	d103      	bne.n	800353e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e05f      	b.n	8003602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	492d      	ldr	r1, [pc, #180]	@ (800360c <I2C_RequestMemoryWrite+0x128>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f8d3 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e04c      	b.n	8003602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	6a39      	ldr	r1, [r7, #32]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f95e 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	2b04      	cmp	r3, #4
 8003594:	d107      	bne.n	80035a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e02b      	b.n	8003602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b0:	893b      	ldrh	r3, [r7, #8]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	e021      	b.n	8003600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035cc:	6a39      	ldr	r1, [r7, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f938 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d107      	bne.n	80035f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e005      	b.n	8003602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f6:	893b      	ldrh	r3, [r7, #8]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	00010002 	.word	0x00010002

08003610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003620:	e048      	b.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d044      	beq.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fd fe79 	bl	8001320 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d139      	bne.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10d      	bne.n	8003666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	e00c      	b.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	43da      	mvns	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	d116      	bne.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e023      	b.n	80036fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10d      	bne.n	80036da <I2C_WaitOnFlagUntilTimeout+0xca>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	e00c      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d093      	beq.n	8003622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003712:	e071      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003722:	d123      	bne.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800373c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e067      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d041      	beq.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fd fdd4 	bl	8001320 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d136      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10c      	bne.n	80037ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e00b      	b.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4013      	ands	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e021      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10c      	bne.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e00b      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f af6d 	bne.w	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003850:	e034      	b.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8e3 	bl	8003a1e <I2C_IsAcknowledgeFailed>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e034      	b.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d028      	beq.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fd fd59 	bl	8001320 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11d      	bne.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b80      	cmp	r3, #128	@ 0x80
 800388c:	d016      	beq.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d1c3      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e0:	e034      	b.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f89b 	bl	8003a1e <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e034      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d028      	beq.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fd fd11 	bl	8001320 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11d      	bne.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d016      	beq.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d1c3      	bne.n	80038e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003970:	e049      	b.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d119      	bne.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0210 	mvn.w	r2, #16
 8003988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e030      	b.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fd fcb4 	bl	8001320 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d016      	beq.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d1ae      	bne.n	8003972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d11b      	bne.n	8003a6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e267      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d075      	beq.n	8003b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9a:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d112      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b82      	ldr	r3, [pc, #520]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003abe:	d10b      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05b      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d157      	bne.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e242      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_OscConfig+0x74>
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e01d      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x98>
 8003afa:	4b70      	ldr	r3, [pc, #448]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6f      	ldr	r2, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b6d      	ldr	r3, [pc, #436]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003b14:	4b69      	ldr	r3, [pc, #420]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a68      	ldr	r2, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a65      	ldr	r2, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd fbf4 	bl	8001320 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fbf0 	bl	8001320 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e207      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fbe0 	bl	8001320 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fbdc 	bl	8001320 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1f3      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	4b51      	ldr	r3, [pc, #324]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d063      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d11c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b44      	ldr	r3, [pc, #272]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x152>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1c7      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4937      	ldr	r1, [pc, #220]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	e03a      	b.n	8003c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d020      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bec:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_RCC_OscConfig+0x244>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd fb95 	bl	8001320 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fd fb91 	bl	8001320 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e1a8      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4925      	ldr	r1, [pc, #148]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	e015      	b.n	8003c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_OscConfig+0x244>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fb74 	bl	8001320 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fd fb70 	bl	8001320 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e187      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d036      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCC_OscConfig+0x248>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fd fb54 	bl	8001320 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fd fb50 	bl	8001320 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e167      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_OscConfig+0x240>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x200>
 8003c9a:	e01b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCC_OscConfig+0x248>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fb3d 	bl	8001320 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e00e      	b.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fd fb39 	bl	8001320 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d907      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e150      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470000 	.word	0x42470000
 8003cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b88      	ldr	r3, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ea      	bne.n	8003caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8097 	beq.w	8003e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b7a      	ldr	r3, [pc, #488]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b77      	ldr	r3, [pc, #476]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b74      	ldr	r3, [pc, #464]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a73      	ldr	r2, [pc, #460]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd faf9 	bl	8001320 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fd faf5 	bl	8001320 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e10c      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef0 <HAL_RCC_OscConfig+0x474>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2ea>
 8003d58:	4b64      	ldr	r3, [pc, #400]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	4a63      	ldr	r2, [pc, #396]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d64:	e01c      	b.n	8003da0 <HAL_RCC_OscConfig+0x324>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x30c>
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	4a5e      	ldr	r2, [pc, #376]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0x324>
 8003d88:	4b58      	ldr	r3, [pc, #352]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a57      	ldr	r2, [pc, #348]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	4b55      	ldr	r3, [pc, #340]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd faba 	bl	8001320 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd fab6 	bl	8001320 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0cb      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	4b49      	ldr	r3, [pc, #292]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <HAL_RCC_OscConfig+0x334>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd4:	f7fd faa4 	bl	8001320 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fd faa0 	bl	8001320 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0b5      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a1 	beq.w	8003f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1a:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d05c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d141      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd fa74 	bl	8001320 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fa70 	bl	8001320 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e087      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	491b      	ldr	r1, [pc, #108]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fa49 	bl	8001320 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fd fa45 	bl	8001320 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e05c      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea4:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x416>
 8003eb0:	e054      	b.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <HAL_RCC_OscConfig+0x478>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fa32 	bl	8001320 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fa2e 	bl	8001320 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e045      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_OscConfig+0x470>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x444>
 8003ede:	e03d      	b.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e038      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x4ec>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d028      	beq.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d121      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0cc      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b68      	ldr	r3, [pc, #416]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d90c      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b65      	ldr	r3, [pc, #404]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b63      	ldr	r3, [pc, #396]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b8      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	494d      	ldr	r1, [pc, #308]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d044      	beq.n	800408c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d119      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d003      	beq.n	800402a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	4b3f      	ldr	r3, [pc, #252]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e06f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e067      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4934      	ldr	r1, [pc, #208]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800405c:	f7fd f960 	bl	8001320 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd f95c 	bl	8001320 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b2b      	ldr	r3, [pc, #172]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d20c      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e032      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4916      	ldr	r1, [pc, #88]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490e      	ldr	r1, [pc, #56]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f821 	bl	8004138 <HAL_RCC_GetSysClockFreq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	490a      	ldr	r1, [pc, #40]	@ (800412c <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd f8c0 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023c00 	.word	0x40023c00
 8004128:	40023800 	.word	0x40023800
 800412c:	0800579c 	.word	0x0800579c
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b090      	sub	sp, #64	@ 0x40
 800413e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004150:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b08      	cmp	r3, #8
 800415a:	d00d      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x40>
 800415c:	2b08      	cmp	r3, #8
 800415e:	f200 80a1 	bhi.w	80042a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x34>
 8004166:	2b04      	cmp	r3, #4
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x3a>
 800416a:	e09b      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x184>)
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004170:	e09b      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004172:	4b53      	ldr	r3, [pc, #332]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004176:	e098      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004178:	4b4f      	ldr	r3, [pc, #316]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004182:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d028      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	2200      	movs	r2, #0
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	627a      	str	r2, [r7, #36]	@ 0x24
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a0:	2100      	movs	r1, #0
 80041a2:	4b47      	ldr	r3, [pc, #284]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a4:	fb03 f201 	mul.w	r2, r3, r1
 80041a8:	2300      	movs	r3, #0
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	4a43      	ldr	r2, [pc, #268]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b2:	fba0 1202 	umull	r1, r2, r0, r2
 80041b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b8:	460a      	mov	r2, r1
 80041ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041be:	4413      	add	r3, r2
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	2200      	movs	r2, #0
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041d2:	f7fc f801 	bl	80001d8 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4613      	mov	r3, r2
 80041dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041de:	e053      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	2200      	movs	r2, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	617a      	str	r2, [r7, #20]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041f2:	f04f 0b00 	mov.w	fp, #0
 80041f6:	4652      	mov	r2, sl
 80041f8:	465b      	mov	r3, fp
 80041fa:	f04f 0000 	mov.w	r0, #0
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	0159      	lsls	r1, r3, #5
 8004204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004208:	0150      	lsls	r0, r2, #5
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	ebb2 080a 	subs.w	r8, r2, sl
 8004212:	eb63 090b 	sbc.w	r9, r3, fp
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800422a:	ebb2 0408 	subs.w	r4, r2, r8
 800422e:	eb63 0509 	sbc.w	r5, r3, r9
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	00eb      	lsls	r3, r5, #3
 800423c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004240:	00e2      	lsls	r2, r4, #3
 8004242:	4614      	mov	r4, r2
 8004244:	461d      	mov	r5, r3
 8004246:	eb14 030a 	adds.w	r3, r4, sl
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	eb45 030b 	adc.w	r3, r5, fp
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425e:	4629      	mov	r1, r5
 8004260:	028b      	lsls	r3, r1, #10
 8004262:	4621      	mov	r1, r4
 8004264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004268:	4621      	mov	r1, r4
 800426a:	028a      	lsls	r2, r1, #10
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	2200      	movs	r2, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800427c:	f7fb ffac 	bl	80001d8 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x184>)
 80042a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3740      	adds	r7, #64	@ 0x40
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	017d7840 	.word	0x017d7840

080042c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	@ (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e0:	f7ff fff0 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0a9b      	lsrs	r3, r3, #10
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	@ (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	080057ac 	.word	0x080057ac

08004304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004308:	f7ff ffdc 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0b5b      	lsrs	r3, r3, #13
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	@ (8004328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	080057ac 	.word	0x080057ac

0800432c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e041      	b.n	80043c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fe2a 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f000 fbe6 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e03c      	b.n	800445e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	@ (800446c <HAL_TIM_Base_Start+0xa0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_TIM_Base_Start+0x5c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d013      	beq.n	8004428 <HAL_TIM_Base_Start+0x5c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_TIM_Base_Start+0xa4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start+0x5c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <HAL_TIM_Base_Start+0xa8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start+0x5c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a17      	ldr	r2, [pc, #92]	@ (8004478 <HAL_TIM_Base_Start+0xac>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start+0x5c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a16      	ldr	r2, [pc, #88]	@ (800447c <HAL_TIM_Base_Start+0xb0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d010      	beq.n	800445c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	e007      	b.n	800445c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40014000 	.word	0x40014000

08004480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e044      	b.n	8004522 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004530 <HAL_TIM_Base_Start_IT+0xb0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <HAL_TIM_Base_Start_IT+0xb4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <HAL_TIM_Base_Start_IT+0xb8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	@ (800453c <HAL_TIM_Base_Start_IT+0xbc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x6c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <HAL_TIM_Base_Start_IT+0xc0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d010      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	e007      	b.n	8004520 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40014000 	.word	0x40014000

08004544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e041      	b.n	80045da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f839 	bl	80045e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fada 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0202 	mvn.w	r2, #2
 800462a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fa5c 	bl	8004afe <HAL_TIM_IC_CaptureCallback>
 8004646:	e005      	b.n	8004654 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fa4e 	bl	8004aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa5f 	bl	8004b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01b      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0204 	mvn.w	r2, #4
 8004676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fa36 	bl	8004afe <HAL_TIM_IC_CaptureCallback>
 8004692:	e005      	b.n	80046a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa28 	bl	8004aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa39 	bl	8004b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0208 	mvn.w	r2, #8
 80046c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fa10 	bl	8004afe <HAL_TIM_IC_CaptureCallback>
 80046de:	e005      	b.n	80046ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fa02 	bl	8004aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa13 	bl	8004b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0210 	mvn.w	r2, #16
 800470e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2208      	movs	r2, #8
 8004714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9ea 	bl	8004afe <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f9dc 	bl	8004aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9ed 	bl	8004b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0201 	mvn.w	r2, #1
 800475a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc fae9 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800477e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fd05 	bl	8005190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00c      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9be 	bl	8004b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0220 	mvn.w	r2, #32
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fcd7 	bl	800517c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e0ae      	b.n	8004954 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b0c      	cmp	r3, #12
 8004802:	f200 809f 	bhi.w	8004944 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004806:	a201      	add	r2, pc, #4	@ (adr r2, 800480c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	08004841 	.word	0x08004841
 8004810:	08004945 	.word	0x08004945
 8004814:	08004945 	.word	0x08004945
 8004818:	08004945 	.word	0x08004945
 800481c:	08004881 	.word	0x08004881
 8004820:	08004945 	.word	0x08004945
 8004824:	08004945 	.word	0x08004945
 8004828:	08004945 	.word	0x08004945
 800482c:	080048c3 	.word	0x080048c3
 8004830:	08004945 	.word	0x08004945
 8004834:	08004945 	.word	0x08004945
 8004838:	08004945 	.word	0x08004945
 800483c:	08004903 	.word	0x08004903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa04 	bl	8004c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0208 	orr.w	r2, r2, #8
 800485a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	619a      	str	r2, [r3, #24]
      break;
 800487e:	e064      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fa4a 	bl	8004d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800489a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	619a      	str	r2, [r3, #24]
      break;
 80048c0:	e043      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fa95 	bl	8004df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0208 	orr.w	r2, r2, #8
 80048dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0204 	bic.w	r2, r2, #4
 80048ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69d9      	ldr	r1, [r3, #28]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	61da      	str	r2, [r3, #28]
      break;
 8004900:	e023      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fadf 	bl	8004ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800491c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	61da      	str	r2, [r3, #28]
      break;
 8004942:	e002      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
      break;
 8004948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_TIM_ConfigClockSource+0x1c>
 8004974:	2302      	movs	r3, #2
 8004976:	e0b4      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x186>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800499e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b0:	d03e      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0xd4>
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b6:	f200 8087 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049be:	f000 8086 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x172>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c6:	d87f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b70      	cmp	r3, #112	@ 0x70
 80049ca:	d01a      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0xa6>
 80049cc:	2b70      	cmp	r3, #112	@ 0x70
 80049ce:	d87b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b60      	cmp	r3, #96	@ 0x60
 80049d2:	d050      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x11a>
 80049d4:	2b60      	cmp	r3, #96	@ 0x60
 80049d6:	d877      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b50      	cmp	r3, #80	@ 0x50
 80049da:	d03c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xfa>
 80049dc:	2b50      	cmp	r3, #80	@ 0x50
 80049de:	d873      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b40      	cmp	r3, #64	@ 0x40
 80049e2:	d058      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x13a>
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d86f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b30      	cmp	r3, #48	@ 0x30
 80049ea:	d064      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80049ec:	2b30      	cmp	r3, #48	@ 0x30
 80049ee:	d86b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d060      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d867      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d05a      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a00:	e062      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a12:	f000 fb25 	bl	8005060 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	609a      	str	r2, [r3, #8]
      break;
 8004a2e:	e04f      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	f000 fb0e 	bl	8005060 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a52:	609a      	str	r2, [r3, #8]
      break;
 8004a54:	e03c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fa82 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2150      	movs	r1, #80	@ 0x50
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fadb 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004a74:	e02c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 faa1 	bl	8004fca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2160      	movs	r1, #96	@ 0x60
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 facb 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004a94:	e01c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 fa62 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2140      	movs	r1, #64	@ 0x40
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fabb 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f000 fab2 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e000      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c38 <TIM_Base_SetConfig+0xfc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a37      	ldr	r2, [pc, #220]	@ (8004c3c <TIM_Base_SetConfig+0x100>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a36      	ldr	r2, [pc, #216]	@ (8004c40 <TIM_Base_SetConfig+0x104>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a35      	ldr	r2, [pc, #212]	@ (8004c44 <TIM_Base_SetConfig+0x108>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2b      	ldr	r2, [pc, #172]	@ (8004c38 <TIM_Base_SetConfig+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01b      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b94:	d017      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a28      	ldr	r2, [pc, #160]	@ (8004c3c <TIM_Base_SetConfig+0x100>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a27      	ldr	r2, [pc, #156]	@ (8004c40 <TIM_Base_SetConfig+0x104>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00f      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a26      	ldr	r2, [pc, #152]	@ (8004c44 <TIM_Base_SetConfig+0x108>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	@ (8004c48 <TIM_Base_SetConfig+0x10c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a24      	ldr	r2, [pc, #144]	@ (8004c4c <TIM_Base_SetConfig+0x110>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <TIM_Base_SetConfig+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004c38 <TIM_Base_SetConfig+0xfc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800

08004c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f023 0201 	bic.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 0302 	bic.w	r3, r3, #2
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d1c <TIM_OC1_SetConfig+0xc8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10c      	bne.n	8004cca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0308 	bic.w	r3, r3, #8
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <TIM_OC1_SetConfig+0xc8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d111      	bne.n	8004cf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40010000 	.word	0x40010000

08004d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f023 0210 	bic.w	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0320 	bic.w	r3, r3, #32
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <TIM_OC2_SetConfig+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10d      	bne.n	8004d9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <TIM_OC2_SetConfig+0xd4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d113      	bne.n	8004dcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000

08004df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <TIM_OC3_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10d      	bne.n	8004e72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <TIM_OC3_SetConfig+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d113      	bne.n	8004ea2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40010000 	.word	0x40010000

08004ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	@ (8004f68 <TIM_OC4_SetConfig+0x9c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000

08004f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 030a 	bic.w	r3, r3, #10
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0210 	bic.w	r2, r3, #16
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0307 	orr.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e050      	b.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005104:	d013      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10c      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40014000 	.word	0x40014000

0800517c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e042      	b.n	800523c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb ff7a 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	@ 0x24
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f82b 	bl	8005244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800520c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800521c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b0c0      	sub	sp, #256	@ 0x100
 800524a:	af00      	add	r7, sp, #0
 800524c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	ea40 0301 	orr.w	r3, r0, r1
 800526c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800529c:	f021 010c 	bic.w	r1, r1, #12
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052aa:	430b      	orrs	r3, r1
 80052ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	6999      	ldr	r1, [r3, #24]
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	ea40 0301 	orr.w	r3, r0, r1
 80052ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005510 <UART_SetConfig+0x2cc>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d005      	beq.n	80052e4 <UART_SetConfig+0xa0>
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b8d      	ldr	r3, [pc, #564]	@ (8005514 <UART_SetConfig+0x2d0>)
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d104      	bne.n	80052ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e4:	f7ff f80e 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 80052e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052ec:	e003      	b.n	80052f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fe fff5 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 80052f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005300:	f040 810c 	bne.w	800551c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800530e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	1891      	adds	r1, r2, r2
 800531c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800531e:	415b      	adcs	r3, r3
 8005320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005326:	4621      	mov	r1, r4
 8005328:	eb12 0801 	adds.w	r8, r2, r1
 800532c:	4629      	mov	r1, r5
 800532e:	eb43 0901 	adc.w	r9, r3, r1
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800533e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005346:	4690      	mov	r8, r2
 8005348:	4699      	mov	r9, r3
 800534a:	4623      	mov	r3, r4
 800534c:	eb18 0303 	adds.w	r3, r8, r3
 8005350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005354:	462b      	mov	r3, r5
 8005356:	eb49 0303 	adc.w	r3, r9, r3
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800536a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800536e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005372:	460b      	mov	r3, r1
 8005374:	18db      	adds	r3, r3, r3
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
 8005378:	4613      	mov	r3, r2
 800537a:	eb42 0303 	adc.w	r3, r2, r3
 800537e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005388:	f7fa ff26 	bl	80001d8 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4b61      	ldr	r3, [pc, #388]	@ (8005518 <UART_SetConfig+0x2d4>)
 8005392:	fba3 2302 	umull	r2, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	011c      	lsls	r4, r3, #4
 800539a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053ac:	4642      	mov	r2, r8
 80053ae:	464b      	mov	r3, r9
 80053b0:	1891      	adds	r1, r2, r2
 80053b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053b4:	415b      	adcs	r3, r3
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053bc:	4641      	mov	r1, r8
 80053be:	eb12 0a01 	adds.w	sl, r2, r1
 80053c2:	4649      	mov	r1, r9
 80053c4:	eb43 0b01 	adc.w	fp, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053dc:	4692      	mov	sl, r2
 80053de:	469b      	mov	fp, r3
 80053e0:	4643      	mov	r3, r8
 80053e2:	eb1a 0303 	adds.w	r3, sl, r3
 80053e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ea:	464b      	mov	r3, r9
 80053ec:	eb4b 0303 	adc.w	r3, fp, r3
 80053f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005400:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005408:	460b      	mov	r3, r1
 800540a:	18db      	adds	r3, r3, r3
 800540c:	643b      	str	r3, [r7, #64]	@ 0x40
 800540e:	4613      	mov	r3, r2
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800541a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800541e:	f7fa fedb 	bl	80001d8 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4611      	mov	r1, r2
 8005428:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <UART_SetConfig+0x2d4>)
 800542a:	fba3 2301 	umull	r2, r3, r3, r1
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2264      	movs	r2, #100	@ 0x64
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	1acb      	subs	r3, r1, r3
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800543e:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <UART_SetConfig+0x2d4>)
 8005440:	fba3 2302 	umull	r2, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800544c:	441c      	add	r4, r3
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005458:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800545c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005468:	415b      	adcs	r3, r3
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005470:	4641      	mov	r1, r8
 8005472:	1851      	adds	r1, r2, r1
 8005474:	6339      	str	r1, [r7, #48]	@ 0x30
 8005476:	4649      	mov	r1, r9
 8005478:	414b      	adcs	r3, r1
 800547a:	637b      	str	r3, [r7, #52]	@ 0x34
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005488:	4659      	mov	r1, fp
 800548a:	00cb      	lsls	r3, r1, #3
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005492:	4651      	mov	r1, sl
 8005494:	00ca      	lsls	r2, r1, #3
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	4603      	mov	r3, r0
 800549c:	4642      	mov	r2, r8
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a4:	464b      	mov	r3, r9
 80054a6:	460a      	mov	r2, r1
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054c4:	460b      	mov	r3, r1
 80054c6:	18db      	adds	r3, r3, r3
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ca:	4613      	mov	r3, r2
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054da:	f7fa fe7d 	bl	80001d8 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <UART_SetConfig+0x2d4>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	@ 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	3332      	adds	r3, #50	@ 0x32
 80054f6:	4a08      	ldr	r2, [pc, #32]	@ (8005518 <UART_SetConfig+0x2d4>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 0207 	and.w	r2, r3, #7
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4422      	add	r2, r4
 800550a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800550c:	e106      	b.n	800571c <UART_SetConfig+0x4d8>
 800550e:	bf00      	nop
 8005510:	40011000 	.word	0x40011000
 8005514:	40011400 	.word	0x40011400
 8005518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005520:	2200      	movs	r2, #0
 8005522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005526:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800552a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800552e:	4642      	mov	r2, r8
 8005530:	464b      	mov	r3, r9
 8005532:	1891      	adds	r1, r2, r2
 8005534:	6239      	str	r1, [r7, #32]
 8005536:	415b      	adcs	r3, r3
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800553e:	4641      	mov	r1, r8
 8005540:	1854      	adds	r4, r2, r1
 8005542:	4649      	mov	r1, r9
 8005544:	eb43 0501 	adc.w	r5, r3, r1
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	00eb      	lsls	r3, r5, #3
 8005552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005556:	00e2      	lsls	r2, r4, #3
 8005558:	4614      	mov	r4, r2
 800555a:	461d      	mov	r5, r3
 800555c:	4643      	mov	r3, r8
 800555e:	18e3      	adds	r3, r4, r3
 8005560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005564:	464b      	mov	r3, r9
 8005566:	eb45 0303 	adc.w	r3, r5, r3
 800556a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800557a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800558a:	4629      	mov	r1, r5
 800558c:	008b      	lsls	r3, r1, #2
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005594:	4621      	mov	r1, r4
 8005596:	008a      	lsls	r2, r1, #2
 8005598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800559c:	f7fa fe1c 	bl	80001d8 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4b60      	ldr	r3, [pc, #384]	@ (8005728 <UART_SetConfig+0x4e4>)
 80055a6:	fba3 2302 	umull	r2, r3, r3, r2
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	011c      	lsls	r4, r3, #4
 80055ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	1891      	adds	r1, r2, r2
 80055c6:	61b9      	str	r1, [r7, #24]
 80055c8:	415b      	adcs	r3, r3
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d0:	4641      	mov	r1, r8
 80055d2:	1851      	adds	r1, r2, r1
 80055d4:	6139      	str	r1, [r7, #16]
 80055d6:	4649      	mov	r1, r9
 80055d8:	414b      	adcs	r3, r1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e8:	4659      	mov	r1, fp
 80055ea:	00cb      	lsls	r3, r1, #3
 80055ec:	4651      	mov	r1, sl
 80055ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055f2:	4651      	mov	r1, sl
 80055f4:	00ca      	lsls	r2, r1, #3
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	4642      	mov	r2, r8
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005604:	464b      	mov	r3, r9
 8005606:	460a      	mov	r2, r1
 8005608:	eb42 0303 	adc.w	r3, r2, r3
 800560c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005628:	4649      	mov	r1, r9
 800562a:	008b      	lsls	r3, r1, #2
 800562c:	4641      	mov	r1, r8
 800562e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005632:	4641      	mov	r1, r8
 8005634:	008a      	lsls	r2, r1, #2
 8005636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800563a:	f7fa fdcd 	bl	80001d8 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4611      	mov	r1, r2
 8005644:	4b38      	ldr	r3, [pc, #224]	@ (8005728 <UART_SetConfig+0x4e4>)
 8005646:	fba3 2301 	umull	r2, r3, r3, r1
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	@ 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1acb      	subs	r3, r1, r3
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	3332      	adds	r3, #50	@ 0x32
 8005658:	4a33      	ldr	r2, [pc, #204]	@ (8005728 <UART_SetConfig+0x4e4>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005664:	441c      	add	r4, r3
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	673b      	str	r3, [r7, #112]	@ 0x70
 800566e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	415b      	adcs	r3, r3
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005684:	4641      	mov	r1, r8
 8005686:	1851      	adds	r1, r2, r1
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	4649      	mov	r1, r9
 800568c:	414b      	adcs	r3, r1
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800569c:	4659      	mov	r1, fp
 800569e:	00cb      	lsls	r3, r1, #3
 80056a0:	4651      	mov	r1, sl
 80056a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a6:	4651      	mov	r1, sl
 80056a8:	00ca      	lsls	r2, r1, #3
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	4642      	mov	r2, r8
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056b6:	464b      	mov	r3, r9
 80056b8:	460a      	mov	r2, r1
 80056ba:	eb42 0303 	adc.w	r3, r2, r3
 80056be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056d8:	4649      	mov	r1, r9
 80056da:	008b      	lsls	r3, r1, #2
 80056dc:	4641      	mov	r1, r8
 80056de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e2:	4641      	mov	r1, r8
 80056e4:	008a      	lsls	r2, r1, #2
 80056e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056ea:	f7fa fd75 	bl	80001d8 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <UART_SetConfig+0x4e4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	@ 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	3332      	adds	r3, #50	@ 0x32
 8005706:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <UART_SetConfig+0x4e4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 020f 	and.w	r2, r3, #15
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4422      	add	r2, r4
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005722:	46bd      	mov	sp, r7
 8005724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005728:	51eb851f 	.word	0x51eb851f

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	@ (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	@ (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	@ (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	@ (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f818 	bl	8005784 <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	080057c4 	.word	0x080057c4
 8005778:	080057c4 	.word	0x080057c4
 800577c:	080057c4 	.word	0x080057c4
 8005780:	080057c8 	.word	0x080057c8

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
