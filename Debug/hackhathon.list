
hackhathon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005f90  08005f90  00006f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006038  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000060  08006098  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006098  000083b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa8d  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002084  00000000  00000000  00017b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00019ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c21  00000000  00000000  0001aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016370  00000000  00000000  0001b711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c80  00000000  00000000  00031a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f958  00000000  00000000  00043701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000d309c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d772c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f78 	.word	0x08005f78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005f78 	.word	0x08005f78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <VL6180X_Init>:
 @brief  Initializes VL6180X and check if it is found and resets chip.
 @param  Pointer of i2c
 @returns True if chip found and initialized, False otherwise
 */
/**************************************************************************/
bool VL6180X_Init(I2C_HandleTypeDef *hi2c) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	VL6180X_i2c = hi2c;
 8000578:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <VL6180X_Init+0x3c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
	_i2caddr = VL6180X_DEFAULT_I2C_ADDR;
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <VL6180X_Init+0x40>)
 8000580:	2252      	movs	r2, #82	@ 0x52
 8000582:	701a      	strb	r2, [r3, #0]

	if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8000584:	2000      	movs	r0, #0
 8000586:	f000 f8c1 	bl	800070c <read8>
 800058a:	4603      	mov	r3, r0
 800058c:	2bb4      	cmp	r3, #180	@ 0xb4
 800058e:	d001      	beq.n	8000594 <VL6180X_Init+0x24>
		return false;
 8000590:	2300      	movs	r3, #0
 8000592:	e006      	b.n	80005a2 <VL6180X_Init+0x32>
	}

	// if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) == 0x01) {
	loadSettings();
 8000594:	f000 f80e 	bl	80005b4 <loadSettings>
	//}

	write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 8000598:	2100      	movs	r1, #0
 800059a:	2016      	movs	r0, #22
 800059c:	f000 f8e6 	bl	800076c <write8>

	return true;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000080 	.word	0x20000080
 80005b0:	2000007c 	.word	0x2000007c

080005b4 <loadSettings>:
/*!
 @brief  Load the settings for proximity/distance ranging
 */
/**************************************************************************/

void loadSettings(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	// load settings!

	// private settings from page 24 of app note
	write8(0x0207, 0x01);
 80005b8:	2101      	movs	r1, #1
 80005ba:	f240 2007 	movw	r0, #519	@ 0x207
 80005be:	f000 f8d5 	bl	800076c <write8>
	write8(0x0208, 0x01);
 80005c2:	2101      	movs	r1, #1
 80005c4:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80005c8:	f000 f8d0 	bl	800076c <write8>
	write8(0x0096, 0x00);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2096      	movs	r0, #150	@ 0x96
 80005d0:	f000 f8cc 	bl	800076c <write8>
	write8(0x0097, 0xfd);
 80005d4:	21fd      	movs	r1, #253	@ 0xfd
 80005d6:	2097      	movs	r0, #151	@ 0x97
 80005d8:	f000 f8c8 	bl	800076c <write8>
	write8(0x00e3, 0x00);
 80005dc:	2100      	movs	r1, #0
 80005de:	20e3      	movs	r0, #227	@ 0xe3
 80005e0:	f000 f8c4 	bl	800076c <write8>
	write8(0x00e4, 0x04);
 80005e4:	2104      	movs	r1, #4
 80005e6:	20e4      	movs	r0, #228	@ 0xe4
 80005e8:	f000 f8c0 	bl	800076c <write8>
	write8(0x00e5, 0x02);
 80005ec:	2102      	movs	r1, #2
 80005ee:	20e5      	movs	r0, #229	@ 0xe5
 80005f0:	f000 f8bc 	bl	800076c <write8>
	write8(0x00e6, 0x01);
 80005f4:	2101      	movs	r1, #1
 80005f6:	20e6      	movs	r0, #230	@ 0xe6
 80005f8:	f000 f8b8 	bl	800076c <write8>
	write8(0x00e7, 0x03);
 80005fc:	2103      	movs	r1, #3
 80005fe:	20e7      	movs	r0, #231	@ 0xe7
 8000600:	f000 f8b4 	bl	800076c <write8>
	write8(0x00f5, 0x02);
 8000604:	2102      	movs	r1, #2
 8000606:	20f5      	movs	r0, #245	@ 0xf5
 8000608:	f000 f8b0 	bl	800076c <write8>
	write8(0x00d9, 0x05);
 800060c:	2105      	movs	r1, #5
 800060e:	20d9      	movs	r0, #217	@ 0xd9
 8000610:	f000 f8ac 	bl	800076c <write8>
	write8(0x00db, 0xce);
 8000614:	21ce      	movs	r1, #206	@ 0xce
 8000616:	20db      	movs	r0, #219	@ 0xdb
 8000618:	f000 f8a8 	bl	800076c <write8>
	write8(0x00dc, 0x03);
 800061c:	2103      	movs	r1, #3
 800061e:	20dc      	movs	r0, #220	@ 0xdc
 8000620:	f000 f8a4 	bl	800076c <write8>
	write8(0x00dd, 0xf8);
 8000624:	21f8      	movs	r1, #248	@ 0xf8
 8000626:	20dd      	movs	r0, #221	@ 0xdd
 8000628:	f000 f8a0 	bl	800076c <write8>
	write8(0x009f, 0x00);
 800062c:	2100      	movs	r1, #0
 800062e:	209f      	movs	r0, #159	@ 0x9f
 8000630:	f000 f89c 	bl	800076c <write8>
	write8(0x00a3, 0x3c);
 8000634:	213c      	movs	r1, #60	@ 0x3c
 8000636:	20a3      	movs	r0, #163	@ 0xa3
 8000638:	f000 f898 	bl	800076c <write8>
	write8(0x00b7, 0x00);
 800063c:	2100      	movs	r1, #0
 800063e:	20b7      	movs	r0, #183	@ 0xb7
 8000640:	f000 f894 	bl	800076c <write8>
	write8(0x00bb, 0x3c);
 8000644:	213c      	movs	r1, #60	@ 0x3c
 8000646:	20bb      	movs	r0, #187	@ 0xbb
 8000648:	f000 f890 	bl	800076c <write8>
	write8(0x00b2, 0x09);
 800064c:	2109      	movs	r1, #9
 800064e:	20b2      	movs	r0, #178	@ 0xb2
 8000650:	f000 f88c 	bl	800076c <write8>
	write8(0x00ca, 0x09);
 8000654:	2109      	movs	r1, #9
 8000656:	20ca      	movs	r0, #202	@ 0xca
 8000658:	f000 f888 	bl	800076c <write8>
	write8(0x0198, 0x01);
 800065c:	2101      	movs	r1, #1
 800065e:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 8000662:	f000 f883 	bl	800076c <write8>
	write8(0x01b0, 0x17);
 8000666:	2117      	movs	r1, #23
 8000668:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 800066c:	f000 f87e 	bl	800076c <write8>
	write8(0x01ad, 0x00);
 8000670:	2100      	movs	r1, #0
 8000672:	f240 10ad 	movw	r0, #429	@ 0x1ad
 8000676:	f000 f879 	bl	800076c <write8>
	write8(0x00ff, 0x05);
 800067a:	2105      	movs	r1, #5
 800067c:	20ff      	movs	r0, #255	@ 0xff
 800067e:	f000 f875 	bl	800076c <write8>
	write8(0x0100, 0x05);
 8000682:	2105      	movs	r1, #5
 8000684:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000688:	f000 f870 	bl	800076c <write8>
	write8(0x0199, 0x05);
 800068c:	2105      	movs	r1, #5
 800068e:	f240 1099 	movw	r0, #409	@ 0x199
 8000692:	f000 f86b 	bl	800076c <write8>
	write8(0x01a6, 0x1b);
 8000696:	211b      	movs	r1, #27
 8000698:	f44f 70d3 	mov.w	r0, #422	@ 0x1a6
 800069c:	f000 f866 	bl	800076c <write8>
	write8(0x01ac, 0x3e);
 80006a0:	213e      	movs	r1, #62	@ 0x3e
 80006a2:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 80006a6:	f000 f861 	bl	800076c <write8>
	write8(0x01a7, 0x1f);
 80006aa:	211f      	movs	r1, #31
 80006ac:	f240 10a7 	movw	r0, #423	@ 0x1a7
 80006b0:	f000 f85c 	bl	800076c <write8>
	write8(0x0030, 0x00);
 80006b4:	2100      	movs	r1, #0
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f000 f858 	bl	800076c <write8>

	// Recommended _ Public registers - See data sheet for more detail
	write8(0x0011, 0x10); // Enables polling for 'New Sample ready' when measurement completes
 80006bc:	2110      	movs	r1, #16
 80006be:	2011      	movs	r0, #17
 80006c0:	f000 f854 	bl	800076c <write8>
	write8(0x010a, 0x30); // Set the averaging sample period (compromise between lower noise and increased execution time)
 80006c4:	2130      	movs	r1, #48	@ 0x30
 80006c6:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 80006ca:	f000 f84f 	bl	800076c <write8>
	write8(0x003f, 0x46); // Sets the light and dark gain (upper nibble). Dark gain should not be changed.
 80006ce:	2146      	movs	r1, #70	@ 0x46
 80006d0:	203f      	movs	r0, #63	@ 0x3f
 80006d2:	f000 f84b 	bl	800076c <write8>
	write8(0x0031, 0xFF); // sets the # of range measurements after which auto calibration of system is performed
 80006d6:	21ff      	movs	r1, #255	@ 0xff
 80006d8:	2031      	movs	r0, #49	@ 0x31
 80006da:	f000 f847 	bl	800076c <write8>
	write8(0x0040, 0x63); // Set ALS integration time to 100ms
 80006de:	2163      	movs	r1, #99	@ 0x63
 80006e0:	2040      	movs	r0, #64	@ 0x40
 80006e2:	f000 f843 	bl	800076c <write8>
	write8(0x002e, 0x01); // perform a single temperature calibration of the ranging sensor
 80006e6:	2101      	movs	r1, #1
 80006e8:	202e      	movs	r0, #46	@ 0x2e
 80006ea:	f000 f83f 	bl	800076c <write8>

	// Optional_ Public registers - See data sheet for more detail
	write8(SYSRANGE_INTERMEASUREMENT_PERIOD, 0x09); // Set default ranging inter-measurement period to 100ms
 80006ee:	2109      	movs	r1, #9
 80006f0:	201b      	movs	r0, #27
 80006f2:	f000 f83b 	bl	800076c <write8>
	write8(0x003e, 0x31); 	// Set default ALS inter-measurement period to 500ms
 80006f6:	2131      	movs	r1, #49	@ 0x31
 80006f8:	203e      	movs	r0, #62	@ 0x3e
 80006fa:	f000 f837 	bl	800076c <write8>
	write8(0x0014, 0x24); // Configures interrupt on 'New Sample Ready threshold event'
 80006fe:	2124      	movs	r1, #36	@ 0x24
 8000700:	2014      	movs	r0, #20
 8000702:	f000 f833 	bl	800076c <write8>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <read8>:
 @brief  I2C low level interfacing
 */
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t read8(uint16_t address) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	uint8_t pData[2] = { address >> 8, address };
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	733b      	strb	r3, [r7, #12]
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 2, 10);
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <read8+0x58>)
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <read8+0x5c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	f107 020c 	add.w	r2, r7, #12
 8000734:	230a      	movs	r3, #10
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2302      	movs	r3, #2
 800073a:	f001 fbf7 	bl	8001f2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(VL6180X_i2c, _i2caddr, pData, 1, 10);
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <read8+0x58>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <read8+0x5c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	230a      	movs	r3, #10
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	f001 fce9 	bl	8002128 <HAL_I2C_Master_Receive>
	data = pData[0];
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	73fb      	strb	r3, [r7, #15]
	return data;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000080 	.word	0x20000080
 8000768:	2000007c 	.word	0x2000007c

0800076c <write8>:
	data |= pData[1];
	return data;
}

// write 1 byte
void write8(uint16_t address, uint8_t data) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	4613      	mov	r3, r2
 800077a:	717b      	strb	r3, [r7, #5]
	uint8_t pData[3] = { address >> 8, address, data };
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	733b      	strb	r3, [r7, #12]
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	737b      	strb	r3, [r7, #13]
 800078c:	797b      	ldrb	r3, [r7, #5]
 800078e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 3, 10);
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <write8+0x44>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <write8+0x48>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f107 020c 	add.w	r2, r7, #12
 800079e:	230a      	movs	r3, #10
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2303      	movs	r3, #3
 80007a4:	f001 fbc2 	bl	8001f2c <HAL_I2C_Master_Transmit>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000080 	.word	0x20000080
 80007b4:	2000007c 	.word	0x2000007c

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a0      	sub	sp, #128	@ 0x80
 80007bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 ff2b 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f8c7 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 faef 	bl	8000da8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ca:	f000 f92b 	bl	8000a24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007ce:	f000 fac1 	bl	8000d54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007d2:	f000 f983 	bl	8000adc <MX_TIM2_Init>
  MX_TIM5_Init();
 80007d6:	f000 fa45 	bl	8000c64 <MX_TIM5_Init>
  MX_I2C2_Init();
 80007da:	f000 f951 	bl	8000a80 <MX_I2C2_Init>
  MX_TIM3_Init();
 80007de:	f000 f9c9 	bl	8000b74 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //start conversion
  uint8_t start_conversion_reg = 0b01100111;
 80007e2:	2367      	movs	r3, #103	@ 0x67
 80007e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, LSM303C_CTRL_REG1_A, 1, &start_conversion_reg, 1, HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	2301      	movs	r3, #1
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	f107 0367 	add.w	r3, r7, #103	@ 0x67
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2220      	movs	r2, #32
 80007fc:	213a      	movs	r1, #58	@ 0x3a
 80007fe:	4848      	ldr	r0, [pc, #288]	@ (8000920 <main+0x168>)
 8000800:	f001 fec4 	bl	800258c <HAL_I2C_Mem_Write>
  //initialize distance
  VL6180X_Init(&hi2c2);
 8000804:	4847      	ldr	r0, [pc, #284]	@ (8000924 <main+0x16c>)
 8000806:	f7ff feb3 	bl	8000570 <VL6180X_Init>
  while (1)
  {
	  HAL_Delay(50);
 800080a:	2032      	movs	r0, #50	@ 0x32
 800080c:	f000 ff76 	bl	80016fc <HAL_Delay>
	  read_accelerator((int16_t*)&x_acc_val, (int16_t*)&y_acc_val, (int16_t*)&z_acc_val);
 8000810:	4a45      	ldr	r2, [pc, #276]	@ (8000928 <main+0x170>)
 8000812:	4946      	ldr	r1, [pc, #280]	@ (800092c <main+0x174>)
 8000814:	4846      	ldr	r0, [pc, #280]	@ (8000930 <main+0x178>)
 8000816:	f000 fb0b 	bl	8000e30 <read_accelerator>
	  uint8_t msg[100];
	  uint16_t msg_len = sprintf((char*)msg, "X:%d, Y:%d, Z:%d\n\r", x_acc_val, y_acc_val, z_acc_val);
 800081a:	4b45      	ldr	r3, [pc, #276]	@ (8000930 <main+0x178>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b21b      	sxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4b42      	ldr	r3, [pc, #264]	@ (800092c <main+0x174>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b21b      	sxth	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	4b3f      	ldr	r3, [pc, #252]	@ (8000928 <main+0x170>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b21b      	sxth	r3, r3
 8000830:	4638      	mov	r0, r7
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	460b      	mov	r3, r1
 8000836:	493f      	ldr	r1, [pc, #252]	@ (8000934 <main+0x17c>)
 8000838:	f004 fefe 	bl	8005638 <siprintf>
 800083c:	4603      	mov	r3, r0
 800083e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_len, 1000);
 8000842:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000846:	4639      	mov	r1, r7
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	483a      	ldr	r0, [pc, #232]	@ (8000938 <main+0x180>)
 800084e:	f004 fb37 	bl	8004ec0 <HAL_UART_Transmit>
	  current_program_time=HAL_GetTick();
 8000852:	f000 ff47 	bl	80016e4 <HAL_GetTick>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b38      	ldr	r3, [pc, #224]	@ (800093c <main+0x184>)
 800085c:	601a      	str	r2, [r3, #0]
//	  for( int i=0;i<100;i++){
//		  set_diode_frequency(4,i);
//		  HAL_Delay(50);
//	  }

	  calculate_fall_from_acc();
 800085e:	f000 fba5 	bl	8000fac <calculate_fall_from_acc>
	  if (STATE==NORMAL){
 8000862:	4b37      	ldr	r3, [pc, #220]	@ (8000940 <main+0x188>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d10f      	bne.n	800088a <main+0xd2>
		  uint16_t msg_len2 = sprintf((char*)msg, "STATE: NORMAL  \r\n");
 800086a:	463b      	mov	r3, r7
 800086c:	4935      	ldr	r1, [pc, #212]	@ (8000944 <main+0x18c>)
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fee2 	bl	8005638 <siprintf>
 8000874:	4603      	mov	r3, r0
 8000876:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_len2, 1000);
 800087a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800087e:	4639      	mov	r1, r7
 8000880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000884:	482c      	ldr	r0, [pc, #176]	@ (8000938 <main+0x180>)
 8000886:	f004 fb1b 	bl	8004ec0 <HAL_UART_Transmit>
	  }
	  if (STATE==FALLEN){
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <main+0x188>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d10f      	bne.n	80008b2 <main+0xfa>
		  uint16_t msg_len2 = sprintf((char*)msg, "STATE: FALLEN \r\n");
 8000892:	463b      	mov	r3, r7
 8000894:	492c      	ldr	r1, [pc, #176]	@ (8000948 <main+0x190>)
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fece 	bl	8005638 <siprintf>
 800089c:	4603      	mov	r3, r0
 800089e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_len2, 1000);
 80008a2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80008a6:	4639      	mov	r1, r7
 80008a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ac:	4822      	ldr	r0, [pc, #136]	@ (8000938 <main+0x180>)
 80008ae:	f004 fb07 	bl	8004ec0 <HAL_UART_Transmit>
	  }

	  if (STATE==ALARM){
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <main+0x188>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d10f      	bne.n	80008da <main+0x122>
		  uint16_t msg_len2 = sprintf((char*)msg, "STATE: ALARM \r\n");
 80008ba:	463b      	mov	r3, r7
 80008bc:	4923      	ldr	r1, [pc, #140]	@ (800094c <main+0x194>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 feba 	bl	8005638 <siprintf>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_len2, 1000);
 80008ca:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 80008ce:	4639      	mov	r1, r7
 80008d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d4:	4818      	ldr	r0, [pc, #96]	@ (8000938 <main+0x180>)
 80008d6:	f004 faf3 	bl	8004ec0 <HAL_UART_Transmit>
	  }

	  if ((STATE==FALLEN)&&((current_program_time-fallen_enter_time)>10000)){
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <main+0x188>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d10b      	bne.n	80008fa <main+0x142>
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <main+0x184>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <main+0x198>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008f0:	4293      	cmp	r3, r2
 80008f2:	dd02      	ble.n	80008fa <main+0x142>
		  STATE=ALARM;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <main+0x188>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	701a      	strb	r2, [r3, #0]
	  }


	  if (STATE==NORMAL){
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <main+0x188>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d103      	bne.n	800090a <main+0x152>
		  set_diode_frequency(1,10);
 8000902:	210a      	movs	r1, #10
 8000904:	2001      	movs	r0, #1
 8000906:	f000 faf7 	bl	8000ef8 <set_diode_frequency>
		  //set_buzzer_tone(60);
	  }

	  if (STATE==ALARM){
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <main+0x188>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b03      	cmp	r3, #3
 8000910:	f47f af7b 	bne.w	800080a <main+0x52>
		  set_diode_frequency(10,50);
 8000914:	2132      	movs	r1, #50	@ 0x32
 8000916:	200a      	movs	r0, #10
 8000918:	f000 faee 	bl	8000ef8 <set_diode_frequency>
  {
 800091c:	e775      	b.n	800080a <main+0x52>
 800091e:	bf00      	nop
 8000920:	20000084 	.word	0x20000084
 8000924:	200000d8 	.word	0x200000d8
 8000928:	20000250 	.word	0x20000250
 800092c:	2000024e 	.word	0x2000024e
 8000930:	2000024c 	.word	0x2000024c
 8000934:	08005f90 	.word	0x08005f90
 8000938:	20000204 	.word	0x20000204
 800093c:	20000258 	.word	0x20000258
 8000940:	20000000 	.word	0x20000000
 8000944:	08005fa4 	.word	0x08005fa4
 8000948:	08005fb8 	.word	0x08005fb8
 800094c:	08005fcc 	.word	0x08005fcc
 8000950:	20000254 	.word	0x20000254

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	@ 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	2230      	movs	r2, #48	@ 0x30
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 fe88 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <SystemClock_Config+0xc8>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a26      	ldr	r2, [pc, #152]	@ (8000a1c <SystemClock_Config+0xc8>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <SystemClock_Config+0xc8>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <SystemClock_Config+0xcc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <SystemClock_Config+0xcc>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <SystemClock_Config+0xcc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c4:	2308      	movs	r3, #8
 80009c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009c8:	2364      	movs	r3, #100	@ 0x64
 80009ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fe07 	bl	80035ec <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e4:	f000 fbb6 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2103      	movs	r1, #3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 f869 	bl	8003adc <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a10:	f000 fba0 	bl	8001154 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	@ 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f001 f91f 	bl	8001ca4 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fb72 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000084 	.word	0x20000084
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <MX_I2C2_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_I2C2_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_I2C2_Init+0x50>)
 8000abe:	f001 f8f1 	bl	8001ca4 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fb44 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000d8 	.word	0x200000d8
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b10:	227c      	movs	r2, #124	@ 0x7c
 8000b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b22:	f003 f9bb 	bl	8003e9c <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b2c:	f000 fb12 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b3e:	f003 fd1b 	bl	8004578 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b48:	f000 fb04 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_TIM2_Init+0x94>)
 8000b5a:	f004 f8df 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 faf6 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000012c 	.word	0x2000012c

08000b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c5c <MX_TIM3_Init+0xe8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999*2;
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bac:	4a2c      	ldr	r2, [pc, #176]	@ (8000c60 <MX_TIM3_Init+0xec>)
 8000bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bb8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bca:	4823      	ldr	r0, [pc, #140]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bcc:	f003 f966 	bl	8003e9c <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bd6:	f000 fabd 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000be8:	f003 fcc6 	bl	8004578 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bf2:	f000 faaf 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf6:	4818      	ldr	r0, [pc, #96]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000bf8:	f003 f99f 	bl	8003f3a <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 faa7 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000c16:	f004 f881 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c20:	f000 fa98 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	@ 0x60
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000c3c:	f003 fbda 	bl	80043f4 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c46:	f000 fa85 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <MX_TIM3_Init+0xe4>)
 8000c4c:	f000 fb90 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	@ 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000174 	.word	0x20000174
 8000c5c:	40000400 	.word	0x40000400
 8000c60:	0001869e 	.word	0x0001869e

08000c64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000c96:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <MX_TIM5_Init+0xec>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49999;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000c9c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8000ca8:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000caa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000cae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cbc:	4823      	ldr	r0, [pc, #140]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000cbe:	f003 f8ed 	bl	8003e9c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000cc8:	f000 fa44 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000cda:	f003 fc4d 	bl	8004578 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000ce4:	f000 fa36 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ce8:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000cea:	f003 f926 	bl	8003f3a <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000cf4:	f000 fa2e 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4619      	mov	r1, r3
 8000d06:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000d08:	f004 f808 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000d12:	f000 fa1f 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	@ 0x60
 8000d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000d2e:	f003 fb61 	bl	80043f4 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000d38:	f000 fa0c 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM5_Init+0xe8>)
 8000d3e:	f000 fb17 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000d42:	bf00      	nop
 8000d44:	3738      	adds	r7, #56	@ 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001bc 	.word	0x200001bc
 8000d50:	40000c00 	.word	0x40000c00

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <MX_USART2_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f004 f848 	bl	8004e20 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f9dd 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000204 	.word	0x20000204
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_GPIO_Init+0x80>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <MX_GPIO_Init+0x84>)
 8000dfe:	f000 ff37 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_GPIO_Init+0x84>)
 8000e1c:	f000 fda4 	bl	8001968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <read_accelerator>:

/* USER CODE BEGIN 4 */
void read_accelerator(int16_t* x_acc, int16_t* y_acc, int16_t* z_acc){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	@ 0x30
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	uint8_t* x_acc_addr = (uint8_t*)x_acc;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	61fb      	str	r3, [r7, #28]
	uint8_t* y_acc_addr = (uint8_t*)y_acc;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
	uint8_t* z_acc_addr = (uint8_t*)z_acc;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_X_L_A, 1, x_acc_addr, 1, HAL_MAX_DELAY);
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2301      	movs	r3, #1
 8000e58:	2228      	movs	r2, #40	@ 0x28
 8000e5a:	213a      	movs	r1, #58	@ 0x3a
 8000e5c:	4825      	ldr	r0, [pc, #148]	@ (8000ef4 <read_accelerator+0xc4>)
 8000e5e:	f001 fc8f 	bl	8002780 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_X_H_A, 1, &(x_acc_addr[1]), 1, HAL_MAX_DELAY);
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3301      	adds	r3, #1
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	9202      	str	r2, [sp, #8]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	9201      	str	r2, [sp, #4]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	2229      	movs	r2, #41	@ 0x29
 8000e76:	213a      	movs	r1, #58	@ 0x3a
 8000e78:	481e      	ldr	r0, [pc, #120]	@ (8000ef4 <read_accelerator+0xc4>)
 8000e7a:	f001 fc81 	bl	8002780 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_Y_L_A, 1, y_acc_addr, 1, HAL_MAX_DELAY);
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	2301      	movs	r3, #1
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	222a      	movs	r2, #42	@ 0x2a
 8000e90:	213a      	movs	r1, #58	@ 0x3a
 8000e92:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <read_accelerator+0xc4>)
 8000e94:	f001 fc74 	bl	8002780 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_Y_H_A, 1, &(y_acc_addr[1]), 1, HAL_MAX_DELAY);
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	9202      	str	r2, [sp, #8]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	9201      	str	r2, [sp, #4]
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	222b      	movs	r2, #43	@ 0x2b
 8000eac:	213a      	movs	r1, #58	@ 0x3a
 8000eae:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <read_accelerator+0xc4>)
 8000eb0:	f001 fc66 	bl	8002780 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_Z_L_A, 1, z_acc_addr, 1, HAL_MAX_DELAY);
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	222c      	movs	r2, #44	@ 0x2c
 8000ec6:	213a      	movs	r1, #58	@ 0x3a
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <read_accelerator+0xc4>)
 8000eca:	f001 fc59 	bl	8002780 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, LSM303C_OUT_Z_H_A, 1, &(z_acc_addr[1]), 1, HAL_MAX_DELAY);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed6:	9202      	str	r2, [sp, #8]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	9201      	str	r2, [sp, #4]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	222d      	movs	r2, #45	@ 0x2d
 8000ee2:	213a      	movs	r1, #58	@ 0x3a
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <read_accelerator+0xc4>)
 8000ee6:	f001 fc4b 	bl	8002780 <HAL_I2C_Mem_Read>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000084 	.word	0x20000084

08000ef8 <set_diode_frequency>:
    }

    // Restart the timer
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
}
void set_diode_frequency(int frequency,int pwm_width){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	/*
	 * frequency sets frequency
	 * duty length is o
	 */
	   uint32_t timer_clock = 100000000; // Main timer clock frequency (100 MHz)
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <set_diode_frequency+0xa4>)
 8000f04:	61bb      	str	r3, [r7, #24]
	   uint32_t prescaler = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
	   uint32_t auto_reload = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]

	    // Stop the timer to safely reconfigure
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4823      	ldr	r0, [pc, #140]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f12:	f003 f91b 	bl	800414c <HAL_TIM_PWM_Stop>

	    // Calculate the appropriate prescaler and auto-reload value
	    if (frequency > 0 && frequency <= 20000) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dd37      	ble.n	8000f8c <set_diode_frequency+0x94>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f22:	4293      	cmp	r3, r2
 8000f24:	dc32      	bgt.n	8000f8c <set_diode_frequency+0x94>
	        // Calculate total timer division factor needed to achieve the desired frequency
	        uint32_t division_factor = timer_clock / frequency;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	613b      	str	r3, [r7, #16]

	        // Split division factor into prescaler and ARR
	        // Prescaler should be <= 65535, so limit accordingly
	        prescaler = (division_factor - 1) / 20000; // Keep ARR <= 20000
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <set_diode_frequency+0xac>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0b9b      	lsrs	r3, r3, #14
 8000f3c:	617b      	str	r3, [r7, #20]
	        auto_reload = (division_factor / (prescaler + 1)) - 1;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]

	        if (auto_reload > 20000) {
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d902      	bls.n	8000f5c <set_diode_frequency+0x64>
	            auto_reload = 20000 - 1; // Limit ARR to 20000 max
 8000f56:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8000f5a:	61fb      	str	r3, [r7, #28]
	        }
	        int pwm_width2=(pwm_width)*(auto_reload)/100;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <set_diode_frequency+0xb0>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	60fb      	str	r3, [r7, #12]
	        // Update timer settings
	        __HAL_TIM_SET_PRESCALER(&htim3, prescaler);
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
	        __HAL_TIM_SET_AUTORELOAD(&htim3, auto_reload);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	60d3      	str	r3, [r2, #12]

	        // Set Compare value for 50% duty cycle
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_width2);
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
	    }

	    // Restart the timer
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <set_diode_frequency+0xa8>)
 8000f90:	f003 f82c 	bl	8003fec <HAL_TIM_PWM_Start>


}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	05f5e100 	.word	0x05f5e100
 8000fa0:	20000174 	.word	0x20000174
 8000fa4:	d1b71759 	.word	0xd1b71759
 8000fa8:	51eb851f 	.word	0x51eb851f

08000fac <calculate_fall_from_acc>:

void calculate_fall_from_acc(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0

	int new_data=0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

	if (x_acc_val<0)
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	@ (8001130 <calculate_fall_from_acc+0x184>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da04      	bge.n	8000fca <calculate_fall_from_acc+0x1e>
		new_data=-x_acc_val;
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <calculate_fall_from_acc+0x184>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	617b      	str	r3, [r7, #20]

	static float median_filter_mean_X=0;
	float new_median_filter_mean_X=((MEDIAN_FILTER_LENGTH-1)*median_filter_mean_X+new_data)/MEDIAN_FILTER_LENGTH;
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <calculate_fall_from_acc+0x188>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fee:	edc7 7a04 	vstr	s15, [r7, #16]
	float dy=new_median_filter_mean_X-median_filter_mean_X;
 8000ff2:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <calculate_fall_from_acc+0x188>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001000:	edc7 7a03 	vstr	s15, [r7, #12]
	if (dy>ACCELOMETER_THRESHOLD){
 8001004:	edd7 7a03 	vldr	s15, [r7, #12]
 8001008:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001138 <calculate_fall_from_acc+0x18c>
 800100c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	dd0c      	ble.n	8001030 <calculate_fall_from_acc+0x84>
		STATE=FALLEN;
 8001016:	4b49      	ldr	r3, [pc, #292]	@ (800113c <calculate_fall_from_acc+0x190>)
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]
		if(fallen_enter_time==0)
 800101c:	4b48      	ldr	r3, [pc, #288]	@ (8001140 <calculate_fall_from_acc+0x194>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <calculate_fall_from_acc+0x84>
			fallen_enter_time=HAL_GetTick();
 8001024:	f000 fb5e 	bl	80016e4 <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b44      	ldr	r3, [pc, #272]	@ (8001140 <calculate_fall_from_acc+0x194>)
 800102e:	601a      	str	r2, [r3, #0]
	}

	if (y_acc_val<0)
 8001030:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <calculate_fall_from_acc+0x198>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b21b      	sxth	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	da04      	bge.n	8001044 <calculate_fall_from_acc+0x98>
		new_data=-y_acc_val;
 800103a:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <calculate_fall_from_acc+0x198>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b21b      	sxth	r3, r3
 8001040:	425b      	negs	r3, r3
 8001042:	617b      	str	r3, [r7, #20]

	static float median_filter_mean_Y=0;
	float new_median_filter_mean_Y=((MEDIAN_FILTER_LENGTH-1)*median_filter_mean_Y+new_data)/MEDIAN_FILTER_LENGTH;
 8001044:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <calculate_fall_from_acc+0x19c>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800104e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001060:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	edc7 7a02 	vstr	s15, [r7, #8]
	dy=new_median_filter_mean_Y-median_filter_mean_Y;
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <calculate_fall_from_acc+0x19c>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ed97 7a02 	vldr	s14, [r7, #8]
 8001076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (dy>ACCELOMETER_THRESHOLD){
 800107e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001082:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001138 <calculate_fall_from_acc+0x18c>
 8001086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	dd0c      	ble.n	80010aa <calculate_fall_from_acc+0xfe>
		STATE=FALLEN;
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <calculate_fall_from_acc+0x190>)
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
		if(fallen_enter_time==0)
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <calculate_fall_from_acc+0x194>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <calculate_fall_from_acc+0xfe>
			fallen_enter_time=HAL_GetTick();
 800109e:	f000 fb21 	bl	80016e4 <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <calculate_fall_from_acc+0x194>)
 80010a8:	601a      	str	r2, [r3, #0]
	}

	if (z_acc_val<0)
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <calculate_fall_from_acc+0x1a0>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da04      	bge.n	80010be <calculate_fall_from_acc+0x112>
		new_data=-z_acc_val;
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <calculate_fall_from_acc+0x1a0>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	425b      	negs	r3, r3
 80010bc:	617b      	str	r3, [r7, #20]

	static float median_filter_mean_Z=0;
	float new_median_filter_mean_Z=((MEDIAN_FILTER_LENGTH-1)*median_filter_mean_Z+new_data)/MEDIAN_FILTER_LENGTH;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <calculate_fall_from_acc+0x1a4>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80010c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010da:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	edc7 7a01 	vstr	s15, [r7, #4]
	dy=new_median_filter_mean_Z-median_filter_mean_Z;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <calculate_fall_from_acc+0x1a4>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f4:	edc7 7a03 	vstr	s15, [r7, #12]
	if (dy>ACCELOMETER_THRESHOLD){
 80010f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001138 <calculate_fall_from_acc+0x18c>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dc00      	bgt.n	800110c <calculate_fall_from_acc+0x160>
		STATE=FALLEN;
		if(fallen_enter_time==0)
			fallen_enter_time=HAL_GetTick();
	}

}
 800110a:	e00c      	b.n	8001126 <calculate_fall_from_acc+0x17a>
		STATE=FALLEN;
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <calculate_fall_from_acc+0x190>)
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
		if(fallen_enter_time==0)
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <calculate_fall_from_acc+0x194>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <calculate_fall_from_acc+0x17a>
			fallen_enter_time=HAL_GetTick();
 800111a:	f000 fae3 	bl	80016e4 <HAL_GetTick>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <calculate_fall_from_acc+0x194>)
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000024c 	.word	0x2000024c
 8001134:	2000025c 	.word	0x2000025c
 8001138:	45bb8000 	.word	0x45bb8000
 800113c:	20000000 	.word	0x20000000
 8001140:	20000254 	.word	0x20000254
 8001144:	2000024e 	.word	0x2000024e
 8001148:	20000260 	.word	0x20000260
 800114c:	20000250 	.word	0x20000250
 8001150:	20000264 	.word	0x20000264

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <HAL_MspInit+0x4c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001174:	6453      	str	r3, [r2, #68]	@ 0x44
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <HAL_MspInit+0x4c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a3b      	ldr	r2, [pc, #236]	@ (80012bc <HAL_I2C_MspInit+0x10c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12d      	bne.n	800122e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a39      	ldr	r2, [pc, #228]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80011ee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001200:	2304      	movs	r3, #4
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	482e      	ldr	r0, [pc, #184]	@ (80012c4 <HAL_I2C_MspInit+0x114>)
 800120c:	f000 fbac 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a29      	ldr	r2, [pc, #164]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001220:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800122c:	e041      	b.n	80012b2 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a25      	ldr	r2, [pc, #148]	@ (80012c8 <HAL_I2C_MspInit+0x118>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13c      	bne.n	80012b2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125a:	2312      	movs	r3, #18
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001266:	2304      	movs	r3, #4
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <HAL_I2C_MspInit+0x114>)
 8001272:	f000 fb79 	bl	8001968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001276:	2308      	movs	r3, #8
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001286:	2309      	movs	r3, #9
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <HAL_I2C_MspInit+0x114>)
 8001292:	f000 fb69 	bl	8001968 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_I2C_MspInit+0x110>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	@ 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40005800 	.word	0x40005800

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012dc:	d116      	bne.n	800130c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201c      	movs	r0, #28
 8001300:	f000 fafb 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001304:	201c      	movs	r0, #28
 8001306:	f000 fb14 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800130a:	e026      	b.n	800135a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a15      	ldr	r2, [pc, #84]	@ (8001368 <HAL_TIM_Base_MspInit+0x9c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10e      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a11      	ldr	r2, [pc, #68]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
}
 8001332:	e012      	b.n	800135a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_TIM_Base_MspInit+0xa0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10d      	bne.n	800135a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_TIM_Base_MspInit+0x98>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40000400 	.word	0x40000400
 800136c:	40000c00 	.word	0x40000c00

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a24      	ldr	r2, [pc, #144]	@ (8001420 <HAL_TIM_MspPostInit+0xb0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11e      	bne.n	80013d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013be:	2302      	movs	r3, #2
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	@ (8001428 <HAL_TIM_MspPostInit+0xb8>)
 80013ca:	f000 facd 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80013ce:	e022      	b.n	8001416 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a15      	ldr	r2, [pc, #84]	@ (800142c <HAL_TIM_MspPostInit+0xbc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d11d      	bne.n	8001416 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_TIM_MspPostInit+0xb4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001406:	2302      	movs	r3, #2
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <HAL_TIM_MspPostInit+0xb8>)
 8001412:	f000 faa9 	bl	8001968 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40000400 	.word	0x40000400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40000c00 	.word	0x40000c00

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <HAL_UART_MspInit+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12b      	bne.n	80014aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_UART_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800148a:	230c      	movs	r3, #12
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <HAL_UART_MspInit+0x8c>)
 80014a6:	f000 fa5f 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8d1 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f002 fe75 	bl	8004214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000012c 	.word	0x2000012c

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f004 f890 	bl	8005688 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000268 	.word	0x20000268
 800159c:	200003b8 	.word	0x200003b8

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f004 f84f 	bl	8005694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f8df 	bl	80007b8 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001608:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 800160c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001610:	200003b8 	.word	0x200003b8

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fd88 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000004 	.word	0x20000004
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	2000026c 	.word	0x2000026c

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000026c 	.word	0x2000026c

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e159      	b.n	8001c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8148 	bne.w	8001c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a2 	beq.w	8001c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b57      	ldr	r3, [pc, #348]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a56      	ldr	r2, [pc, #344]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b54      	ldr	r3, [pc, #336]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a52      	ldr	r2, [pc, #328]	@ (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a49      	ldr	r2, [pc, #292]	@ (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x202>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a48      	ldr	r2, [pc, #288]	@ (8001c5c <HAL_GPIO_Init+0x2f4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x1fe>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a47      	ldr	r2, [pc, #284]	@ (8001c60 <HAL_GPIO_Init+0x2f8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x1fa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a46      	ldr	r2, [pc, #280]	@ (8001c64 <HAL_GPIO_Init+0x2fc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x1f6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <HAL_GPIO_Init+0x300>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x1f2>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	@ (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8a:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bae:	4a2f      	ldr	r2, [pc, #188]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bde:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c02:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f aea2 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e12b      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fa70 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	@ 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d08:	f002 f8a0 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a81      	ldr	r2, [pc, #516]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d807      	bhi.n	8001d28 <HAL_I2C_Init+0x84>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	@ (8001f1c <HAL_I2C_Init+0x278>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x92>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f20 <HAL_I2C_Init+0x27c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e7      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a78      	ldr	r2, [pc, #480]	@ (8001f24 <HAL_I2C_Init+0x280>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d802      	bhi.n	8001d78 <HAL_I2C_Init+0xd4>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e009      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_I2C_Init+0x284>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	495c      	ldr	r1, [pc, #368]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001da8:	428b      	cmp	r3, r1
 8001daa:	d819      	bhi.n	8001de0 <HAL_I2C_Init+0x13c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_I2C_Init+0x138>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e59      	subs	r1, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	e051      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x168>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x18e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x196>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x1bc>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fbd0 	bl	80016e4 <HAL_GetTick>
 8001f44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	f040 80e0 	bne.w	8002114 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2319      	movs	r3, #25
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4970      	ldr	r1, [pc, #448]	@ (8002120 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f001 f90e 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0d3      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x50>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0cc      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d007      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	@ 0x21
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	@ (8002124 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fdfa 	bl	8002be4 <I2C_MasterRequestWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08d      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002010:	e066      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f001 f9cc 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	2b04      	cmp	r3, #4
 8002028:	d107      	bne.n	800203a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d017      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6a39      	ldr	r1, [r7, #32]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f001 f9c3 	bl	8003444 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01a      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d194      	bne.n	8002012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000

08002128 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
 8002138:	4613      	mov	r3, r2
 800213a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff fad2 	bl	80016e4 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	f040 8217 	bne.w	800257e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	497c      	ldr	r1, [pc, #496]	@ (800234c <HAL_I2C_Master_Receive+0x224>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 f810 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	e20a      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_Master_Receive+0x50>
 8002174:	2302      	movs	r3, #2
 8002176:	e203      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d007      	beq.n	800219e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2222      	movs	r2, #34	@ 0x22
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2210      	movs	r2, #16
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	893a      	ldrh	r2, [r7, #8]
 80021ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <HAL_I2C_Master_Receive+0x228>)
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fd7e 	bl	8002ce8 <I2C_MasterRequestRead>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c4      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d113      	bne.n	8002226 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e198      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11b      	bne.n	8002266 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800223c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e178      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	d11b      	bne.n	80022a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	e158      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022cc:	e144      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	f200 80f1 	bhi.w	80024ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d123      	bne.n	8002328 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f001 f8f5 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e145      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002326:	e117      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	2b02      	cmp	r3, #2
 800232e:	d14e      	bne.n	80023ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	2200      	movs	r2, #0
 8002338:	4906      	ldr	r1, [pc, #24]	@ (8002354 <HAL_I2C_Master_Receive+0x22c>)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 ff20 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e11a      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
 800234a:	bf00      	nop
 800234c:	00100002 	.word	0x00100002
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023cc:	e0c4      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	496c      	ldr	r1, [pc, #432]	@ (8002588 <HAL_I2C_Master_Receive+0x460>)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fed1 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0cb      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	4955      	ldr	r1, [pc, #340]	@ (8002588 <HAL_I2C_Master_Receive+0x460>)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fea3 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e09d      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024b8:	e04e      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f001 f808 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e058      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d124      	bne.n	8002558 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002524:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f aeb6 	bne.w	80022ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3728      	adds	r7, #40	@ 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00010004 	.word	0x00010004

0800258c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4603      	mov	r3, r0
 800259c:	817b      	strh	r3, [r7, #10]
 800259e:	460b      	mov	r3, r1
 80025a0:	813b      	strh	r3, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a6:	f7ff f89d 	bl	80016e4 <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	f040 80d9 	bne.w	800276c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2319      	movs	r3, #25
 80025c0:	2201      	movs	r2, #1
 80025c2:	496d      	ldr	r1, [pc, #436]	@ (8002778 <HAL_I2C_Mem_Write+0x1ec>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fddb 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0cc      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_I2C_Mem_Write+0x56>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0c5      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d007      	beq.n	8002608 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2221      	movs	r2, #33	@ 0x21
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a4d      	ldr	r2, [pc, #308]	@ (800277c <HAL_I2C_Mem_Write+0x1f0>)
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800264a:	88f8      	ldrh	r0, [r7, #6]
 800264c:	893a      	ldrh	r2, [r7, #8]
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4603      	mov	r3, r0
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fc12 	bl	8002e84 <I2C_RequestMemoryWrite>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d052      	beq.n	800270c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e081      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fea0 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b04      	cmp	r3, #4
 8002680:	d107      	bne.n	8002692 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d11b      	bne.n	800270c <HAL_I2C_Mem_Write+0x180>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1aa      	bne.n	800266a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fe93 	bl	8003444 <I2C_WaitOnBTFFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e016      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	00100002 	.word	0x00100002
 800277c:	ffff0000 	.word	0xffff0000

08002780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	@ 0x30
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	817b      	strh	r3, [r7, #10]
 8002792:	460b      	mov	r3, r1
 8002794:	813b      	strh	r3, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800279a:	f7fe ffa3 	bl	80016e4 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	f040 8214 	bne.w	8002bd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2319      	movs	r3, #25
 80027b4:	2201      	movs	r2, #1
 80027b6:	497b      	ldr	r1, [pc, #492]	@ (80029a4 <HAL_I2C_Mem_Read+0x224>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fce1 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	e207      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x56>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e200      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d007      	beq.n	80027fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800280a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2222      	movs	r2, #34	@ 0x22
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2240      	movs	r2, #64	@ 0x40
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a5b      	ldr	r2, [pc, #364]	@ (80029a8 <HAL_I2C_Mem_Read+0x228>)
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283e:	88f8      	ldrh	r0, [r7, #6]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	8979      	ldrh	r1, [r7, #10]
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fbae 	bl	8002fb0 <I2C_RequestMemoryRead>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1bc      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d113      	bne.n	800288e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e190      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	2b01      	cmp	r3, #1
 8002894:	d11b      	bne.n	80028ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e170      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d11b      	bne.n	800290e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	e150      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002924:	e144      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	2b03      	cmp	r3, #3
 800292c:	f200 80f1 	bhi.w	8002b12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	2b01      	cmp	r3, #1
 8002936:	d123      	bne.n	8002980 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fdc9 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e145      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800297e:	e117      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	d14e      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	2200      	movs	r2, #0
 8002990:	4906      	ldr	r1, [pc, #24]	@ (80029ac <HAL_I2C_Mem_Read+0x22c>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fbf4 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e11a      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
 80029a2:	bf00      	nop
 80029a4:	00100002 	.word	0x00100002
 80029a8:	ffff0000 	.word	0xffff0000
 80029ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a24:	e0c4      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	496c      	ldr	r1, [pc, #432]	@ (8002be0 <HAL_I2C_Mem_Read+0x460>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fba5 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cb      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4955      	ldr	r1, [pc, #340]	@ (8002be0 <HAL_I2C_Mem_Read+0x460>)
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fb77 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e09d      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b10:	e04e      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fcdc 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e058      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d124      	bne.n	8002bb0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f aeb6 	bne.w	8002926 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3728      	adds	r7, #40	@ 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010004 	.word	0x00010004

08002be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d006      	beq.n	8002c0e <I2C_MasterRequestWrite+0x2a>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d003      	beq.n	8002c0e <I2C_MasterRequestWrite+0x2a>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c0c:	d108      	bne.n	8002c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e00b      	b.n	8002c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d107      	bne.n	8002c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa9b 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c5e:	d103      	bne.n	8002c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e035      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c74:	d108      	bne.n	8002c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	e01b      	b.n	8002cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	11db      	asrs	r3, r3, #7
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0306 	and.w	r3, r3, #6
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f063 030f 	orn	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	490e      	ldr	r1, [pc, #56]	@ (8002ce0 <I2C_MasterRequestWrite+0xfc>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fae4 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e010      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <I2C_MasterRequestWrite+0x100>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fad4 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00010008 	.word	0x00010008
 8002ce4:	00010002 	.word	0x00010002

08002ce8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d006      	beq.n	8002d22 <I2C_MasterRequestRead+0x3a>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d003      	beq.n	8002d22 <I2C_MasterRequestRead+0x3a>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e00b      	b.n	8002d4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	2b11      	cmp	r3, #17
 8002d3a:	d107      	bne.n	8002d4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa11 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d72:	d103      	bne.n	8002d7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e079      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d88:	d108      	bne.n	8002d9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d8a:	897b      	ldrh	r3, [r7, #10]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	e05f      	b.n	8002e5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	11db      	asrs	r3, r3, #7
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 0306 	and.w	r3, r3, #6
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f063 030f 	orn	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4930      	ldr	r1, [pc, #192]	@ (8002e7c <I2C_MasterRequestRead+0x194>)
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fa5a 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e054      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4929      	ldr	r1, [pc, #164]	@ (8002e80 <I2C_MasterRequestRead+0x198>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa4a 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e044      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f9af 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e36:	d103      	bne.n	8002e40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e017      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	11db      	asrs	r3, r3, #7
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0306 	and.w	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f063 030e 	orn	r3, r3, #14
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4907      	ldr	r1, [pc, #28]	@ (8002e80 <I2C_MasterRequestRead+0x198>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa06 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	00010008 	.word	0x00010008
 8002e80:	00010002 	.word	0x00010002

08002e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f960 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed4:	d103      	bne.n	8002ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e05f      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	6a3a      	ldr	r2, [r7, #32]
 8002ef6:	492d      	ldr	r1, [pc, #180]	@ (8002fac <I2C_RequestMemoryWrite+0x128>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f9bb 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04c      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	6a39      	ldr	r1, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa46 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d107      	bne.n	8002f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02b      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e021      	b.n	8002fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5c:	893b      	ldrh	r3, [r7, #8]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa20 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e005      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	00010002 	.word	0x00010002

08002fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8c2 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003010:	d103      	bne.n	800301a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0aa      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800302c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	4952      	ldr	r1, [pc, #328]	@ (800317c <I2C_RequestMemoryRead+0x1cc>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f91d 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e097      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f9a8 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2b04      	cmp	r3, #4
 8003070:	d107      	bne.n	8003082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e076      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]
 8003096:	e021      	b.n	80030dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003098:	893b      	ldrh	r3, [r7, #8]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b29b      	uxth	r3, r3
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f982 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e050      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030de:	6a39      	ldr	r1, [r7, #32]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f967 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d107      	bne.n	8003104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e035      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2200      	movs	r2, #0
 8003120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f82b 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313e:	d103      	bne.n	8003148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e013      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	4906      	ldr	r1, [pc, #24]	@ (800317c <I2C_RequestMemoryRead+0x1cc>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f886 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	e048      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d044      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe faa3 	bl	80016e4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d139      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e023      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10d      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0xca>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	e00c      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d093      	beq.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	e071      	b.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d123      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e067      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d041      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe f9fe 	bl	80016e4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d136      	bne.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10c      	bne.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e00b      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f af6d 	bne.w	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c0:	e034      	b.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8e3 	bl	800358e <I2C_IsAcknowledgeFailed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e034      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d028      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe f983 	bl	80016e4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d016      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d1c3      	bne.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	e034      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f89b 	bl	800358e <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e034      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d028      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe f93b 	bl	80016e4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11d      	bne.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d016      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d1c3      	bne.n	8003452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e0:	e049      	b.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d119      	bne.n	8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0210 	mvn.w	r2, #16
 80034f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e030      	b.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe f8de 	bl	80016e4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11d      	bne.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d016      	beq.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d1ae      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a4:	d11b      	bne.n	80035de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e267      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d075      	beq.n	80036f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800360a:	4b88      	ldr	r3, [pc, #544]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00c      	beq.n	8003630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b85      	ldr	r3, [pc, #532]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800361e:	2b08      	cmp	r3, #8
 8003620:	d112      	bne.n	8003648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d10b      	bne.n	8003648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	4b7e      	ldr	r3, [pc, #504]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05b      	beq.n	80036f4 <HAL_RCC_OscConfig+0x108>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d157      	bne.n	80036f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e242      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003650:	d106      	bne.n	8003660 <HAL_RCC_OscConfig+0x74>
 8003652:	4b76      	ldr	r3, [pc, #472]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a75      	ldr	r2, [pc, #468]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xb0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x98>
 800366a:	4b70      	ldr	r3, [pc, #448]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6f      	ldr	r2, [pc, #444]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b6d      	ldr	r3, [pc, #436]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6c      	ldr	r2, [pc, #432]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xb0>
 8003684:	4b69      	ldr	r3, [pc, #420]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a68      	ldr	r2, [pc, #416]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b66      	ldr	r3, [pc, #408]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a65      	ldr	r2, [pc, #404]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe f81e 	bl	80016e4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe f81a 	bl	80016e4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e207      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b5b      	ldr	r3, [pc, #364]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xc0>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe f80a 	bl	80016e4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe f806 	bl	80016e4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1f3      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b51      	ldr	r3, [pc, #324]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0xe8>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d063      	beq.n	80037ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b47      	ldr	r3, [pc, #284]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b44      	ldr	r3, [pc, #272]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b41      	ldr	r3, [pc, #260]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x152>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1c7      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4937      	ldr	r1, [pc, #220]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e03a      	b.n	80037ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b34      	ldr	r3, [pc, #208]	@ (8003830 <HAL_RCC_OscConfig+0x244>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd ffbf 	bl	80016e4 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fd ffbb 	bl	80016e4 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1a8      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003788:	4b28      	ldr	r3, [pc, #160]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4925      	ldr	r1, [pc, #148]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
 800379c:	e015      	b.n	80037ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_OscConfig+0x244>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd ff9e 	bl	80016e4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ac:	f7fd ff9a 	bl	80016e4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e187      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d036      	beq.n	8003844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_RCC_OscConfig+0x248>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd ff7e 	bl	80016e4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd ff7a 	bl	80016e4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e167      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCC_OscConfig+0x240>)
 8003800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x200>
 800380a:	e01b      	b.n	8003844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_OscConfig+0x248>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003812:	f7fd ff67 	bl	80016e4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	e00e      	b.n	8003838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7fd ff63 	bl	80016e4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d907      	bls.n	8003838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e150      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
 800382c:	40023800 	.word	0x40023800
 8003830:	42470000 	.word	0x42470000
 8003834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	4b88      	ldr	r3, [pc, #544]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ea      	bne.n	800381a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8097 	beq.w	8003980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003856:	4b81      	ldr	r3, [pc, #516]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	4b7d      	ldr	r3, [pc, #500]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003870:	6413      	str	r3, [r2, #64]	@ 0x40
 8003872:	4b7a      	ldr	r3, [pc, #488]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b77      	ldr	r3, [pc, #476]	@ (8003a60 <HAL_RCC_OscConfig+0x474>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d118      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388e:	4b74      	ldr	r3, [pc, #464]	@ (8003a60 <HAL_RCC_OscConfig+0x474>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a73      	ldr	r2, [pc, #460]	@ (8003a60 <HAL_RCC_OscConfig+0x474>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fd ff23 	bl	80016e4 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fd ff1f 	bl	80016e4 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e10c      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_OscConfig+0x474>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2ea>
 80038c8:	4b64      	ldr	r3, [pc, #400]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	4a63      	ldr	r2, [pc, #396]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d4:	e01c      	b.n	8003910 <HAL_RCC_OscConfig+0x324>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x30c>
 80038de:	4b5f      	ldr	r3, [pc, #380]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ea:	4b5c      	ldr	r3, [pc, #368]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	4a5b      	ldr	r2, [pc, #364]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0x324>
 80038f8:	4b58      	ldr	r3, [pc, #352]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fc:	4a57      	ldr	r2, [pc, #348]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	@ 0x70
 8003904:	4b55      	ldr	r3, [pc, #340]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003908:	4a54      	ldr	r2, [pc, #336]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fee4 	bl	80016e4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fd fee0 	bl	80016e4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0cb      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0ee      	beq.n	8003920 <HAL_RCC_OscConfig+0x334>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7fd fece 	bl	80016e4 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd feca 	bl	80016e4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0b5      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003962:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ee      	bne.n	800394c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b39      	ldr	r3, [pc, #228]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	4a38      	ldr	r2, [pc, #224]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800397e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a1 	beq.w	8003acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800398a:	4b34      	ldr	r3, [pc, #208]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b08      	cmp	r3, #8
 8003994:	d05c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d141      	bne.n	8003a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <HAL_RCC_OscConfig+0x478>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fd fe9e 	bl	80016e4 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fd fe9a 	bl	80016e4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e087      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	3b01      	subs	r3, #1
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	491b      	ldr	r1, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <HAL_RCC_OscConfig+0x478>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fd fe73 	bl	80016e4 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fd fe6f 	bl	80016e4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e05c      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x416>
 8003a20:	e054      	b.n	8003acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <HAL_RCC_OscConfig+0x478>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd fe5c 	bl	80016e4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fe58 	bl	80016e4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e045      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCC_OscConfig+0x470>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x444>
 8003a4e:	e03d      	b.n	8003acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e038      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000
 8003a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCC_OscConfig+0x4ec>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d028      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d121      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d11a      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d111      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800

08003adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0cc      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	4b68      	ldr	r3, [pc, #416]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d90c      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b65      	ldr	r3, [pc, #404]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b63      	ldr	r3, [pc, #396]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b8      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b30:	4b59      	ldr	r3, [pc, #356]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a58      	ldr	r2, [pc, #352]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b48:	4b53      	ldr	r3, [pc, #332]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b50      	ldr	r3, [pc, #320]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	494d      	ldr	r1, [pc, #308]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d044      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b47      	ldr	r3, [pc, #284]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d119      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e067      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b37      	ldr	r3, [pc, #220]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4934      	ldr	r1, [pc, #208]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fd8a 	bl	80016e4 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fd fd86 	bl	80016e4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e04f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b2b      	ldr	r3, [pc, #172]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b25      	ldr	r3, [pc, #148]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d20c      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b22      	ldr	r3, [pc, #136]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4916      	ldr	r1, [pc, #88]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4e:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490e      	ldr	r1, [pc, #56]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490a      	ldr	r1, [pc, #40]	@ (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fcea 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023c00 	.word	0x40023c00
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08005fdc 	.word	0x08005fdc
 8003ca0:	20000004 	.word	0x20000004
 8003ca4:	20000008 	.word	0x20000008

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b090      	sub	sp, #64	@ 0x40
 8003cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc0:	4b59      	ldr	r3, [pc, #356]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d00d      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	f200 80a1 	bhi.w	8003e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x34>
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cda:	e09b      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce0:	e09b      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ce2:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce6:	e098      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	2200      	movs	r2, #0
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d10:	2100      	movs	r1, #0
 8003d12:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d14:	fb03 f201 	mul.w	r2, r3, r1
 8003d18:	2300      	movs	r3, #0
 8003d1a:	fb00 f303 	mul.w	r3, r0, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	4a43      	ldr	r2, [pc, #268]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d22:	fba0 1202 	umull	r1, r2, r0, r2
 8003d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d28:	460a      	mov	r2, r1
 8003d2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2e:	4413      	add	r3, r2
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d34:	2200      	movs	r2, #0
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	61fa      	str	r2, [r7, #28]
 8003d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d42:	f7fc fa9d 	bl	8000280 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d4e:	e053      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b35      	ldr	r3, [pc, #212]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	617a      	str	r2, [r7, #20]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d62:	f04f 0b00 	mov.w	fp, #0
 8003d66:	4652      	mov	r2, sl
 8003d68:	465b      	mov	r3, fp
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d82:	eb63 090b 	sbc.w	r9, r3, fp
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	00eb      	lsls	r3, r5, #3
 8003dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db0:	00e2      	lsls	r2, r4, #3
 8003db2:	4614      	mov	r4, r2
 8003db4:	461d      	mov	r5, r3
 8003db6:	eb14 030a 	adds.w	r3, r4, sl
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	eb45 030b 	adc.w	r3, r5, fp
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	028b      	lsls	r3, r1, #10
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd8:	4621      	mov	r1, r4
 8003dda:	028a      	lsls	r2, r1, #10
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	2200      	movs	r2, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	60fa      	str	r2, [r7, #12]
 8003de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dec:	f7fc fa48 	bl	8000280 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4613      	mov	r3, r2
 8003df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3740      	adds	r7, #64	@ 0x40
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	017d7840 	.word	0x017d7840

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08005fec 	.word	0x08005fec

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffdc 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0b5b      	lsrs	r3, r3, #13
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	@ (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	08005fec 	.word	0x08005fec

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e041      	b.n	8003f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fa02 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 fc46 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e041      	b.n	8003fd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f839 	bl	8003fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fbf7 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x24>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e022      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d109      	bne.n	800402a <HAL_TIM_PWM_Start+0x3e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e015      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d109      	bne.n	8004044 <HAL_TIM_PWM_Start+0x58>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e008      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e068      	b.n	8004130 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0x82>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800406c:	e013      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0x92>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407c:	e00b      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xa2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800408c:	e003      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fe16 	bl	8004cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	@ (8004138 <HAL_TIM_PWM_Start+0x14c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d107      	bne.n	80040be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_TIM_PWM_Start+0x14c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_TIM_PWM_Start+0x10e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d013      	beq.n	80040fa <HAL_TIM_PWM_Start+0x10e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <HAL_TIM_PWM_Start+0x150>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIM_PWM_Start+0x10e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <HAL_TIM_PWM_Start+0x154>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIM_PWM_Start+0x10e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <HAL_TIM_PWM_Start+0x158>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIM_PWM_Start+0x10e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a14      	ldr	r2, [pc, #80]	@ (8004148 <HAL_TIM_PWM_Start+0x15c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d111      	bne.n	800411e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d010      	beq.n	800412e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411c:	e007      	b.n	800412e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000

0800414c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fdb6 	bl	8004cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <HAL_TIM_PWM_Stop+0xc4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d117      	bne.n	800419e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_TIM_PWM_Stop+0x52>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	f240 4344 	movw	r3, #1092	@ 0x444
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_TIM_PWM_Stop+0x52>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_TIM_PWM_Stop+0x82>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	f240 4344 	movw	r3, #1092	@ 0x444
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_PWM_Stop+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Stop+0x92>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041dc:	e013      	b.n	8004206 <HAL_TIM_PWM_Stop+0xba>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Stop+0xa2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_PWM_Stop+0xba>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Stop+0xb2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	e003      	b.n	8004206 <HAL_TIM_PWM_Stop+0xba>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010000 	.word	0x40010000

08004214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0202 	mvn.w	r2, #2
 8004248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa65 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fa57 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa68 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0204 	mvn.w	r2, #4
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa3f 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa31 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa42 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0208 	mvn.w	r2, #8
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa19 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa0b 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fa1c 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d020      	beq.n	800435c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2208      	movs	r2, #8
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f9f3 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f9e5 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f9f6 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0201 	mvn.w	r2, #1
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9c3 	bl	8004706 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fd34 	bl	8004e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9c7 	bl	8004756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0220 	mvn.w	r2, #32
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fd06 	bl	8004df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800440e:	2302      	movs	r3, #2
 8004410:	e0ae      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b0c      	cmp	r3, #12
 800441e:	f200 809f 	bhi.w	8004560 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004422:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	0800445d 	.word	0x0800445d
 800442c:	08004561 	.word	0x08004561
 8004430:	08004561 	.word	0x08004561
 8004434:	08004561 	.word	0x08004561
 8004438:	0800449d 	.word	0x0800449d
 800443c:	08004561 	.word	0x08004561
 8004440:	08004561 	.word	0x08004561
 8004444:	08004561 	.word	0x08004561
 8004448:	080044df 	.word	0x080044df
 800444c:	08004561 	.word	0x08004561
 8004450:	08004561 	.word	0x08004561
 8004454:	08004561 	.word	0x08004561
 8004458:	0800451f 	.word	0x0800451f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa0e 	bl	8004884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	619a      	str	r2, [r3, #24]
      break;
 800449a:	e064      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fa54 	bl	8004950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	619a      	str	r2, [r3, #24]
      break;
 80044dc:	e043      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fa9f 	bl	8004a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0208 	orr.w	r2, r2, #8
 80044f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0204 	bic.w	r2, r2, #4
 8004508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
      break;
 800451c:	e023      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fae9 	bl	8004afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	021a      	lsls	r2, r3, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	61da      	str	r2, [r3, #28]
      break;
 800455e:	e002      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	75fb      	strb	r3, [r7, #23]
      break;
 8004564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800456e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e0b4      	b.n	80046fe <HAL_TIM_ConfigClockSource+0x186>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045cc:	d03e      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xd4>
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d2:	f200 8087 	bhi.w	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045da:	f000 8086 	beq.w	80046ea <HAL_TIM_ConfigClockSource+0x172>
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e2:	d87f      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b70      	cmp	r3, #112	@ 0x70
 80045e6:	d01a      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xa6>
 80045e8:	2b70      	cmp	r3, #112	@ 0x70
 80045ea:	d87b      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b60      	cmp	r3, #96	@ 0x60
 80045ee:	d050      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x11a>
 80045f0:	2b60      	cmp	r3, #96	@ 0x60
 80045f2:	d877      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b50      	cmp	r3, #80	@ 0x50
 80045f6:	d03c      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0xfa>
 80045f8:	2b50      	cmp	r3, #80	@ 0x50
 80045fa:	d873      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b40      	cmp	r3, #64	@ 0x40
 80045fe:	d058      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004600:	2b40      	cmp	r3, #64	@ 0x40
 8004602:	d86f      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b30      	cmp	r3, #48	@ 0x30
 8004606:	d064      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b30      	cmp	r3, #48	@ 0x30
 800460a:	d86b      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d060      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d867      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d05c      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d05a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 800461c:	e062      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800462e:	f000 fb2f 	bl	8004c90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]
      break;
 800464a:	e04f      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800465c:	f000 fb18 	bl	8004c90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800466e:	609a      	str	r2, [r3, #8]
      break;
 8004670:	e03c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fa8c 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2150      	movs	r1, #80	@ 0x50
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fae5 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 8004690:	e02c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 faab 	bl	8004bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2160      	movs	r1, #96	@ 0x60
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fad5 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80046b0:	e01c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 fa6c 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2140      	movs	r1, #64	@ 0x40
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fac5 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80046d0:	e00c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f000 fabc 	bl	8004c5a <TIM_ITRx_SetConfig>
      break;
 80046e2:	e003      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e000      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3a      	ldr	r2, [pc, #232]	@ (8004868 <TIM_Base_SetConfig+0xfc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00f      	beq.n	80047a4 <TIM_Base_SetConfig+0x38>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x38>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a37      	ldr	r2, [pc, #220]	@ (800486c <TIM_Base_SetConfig+0x100>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x38>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a36      	ldr	r2, [pc, #216]	@ (8004870 <TIM_Base_SetConfig+0x104>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x38>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a35      	ldr	r2, [pc, #212]	@ (8004874 <TIM_Base_SetConfig+0x108>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <TIM_Base_SetConfig+0xfc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01b      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d017      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a28      	ldr	r2, [pc, #160]	@ (800486c <TIM_Base_SetConfig+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <TIM_Base_SetConfig+0x104>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a26      	ldr	r2, [pc, #152]	@ (8004874 <TIM_Base_SetConfig+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a25      	ldr	r2, [pc, #148]	@ (8004878 <TIM_Base_SetConfig+0x10c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a24      	ldr	r2, [pc, #144]	@ (800487c <TIM_Base_SetConfig+0x110>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a23      	ldr	r2, [pc, #140]	@ (8004880 <TIM_Base_SetConfig+0x114>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0e      	ldr	r2, [pc, #56]	@ (8004868 <TIM_Base_SetConfig+0xfc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d103      	bne.n	800483c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]
  }
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800

08004884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 0201 	bic.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 0302 	bic.w	r3, r3, #2
 80048cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <TIM_OC1_SetConfig+0xc8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0308 	bic.w	r3, r3, #8
 80048e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a13      	ldr	r2, [pc, #76]	@ (800494c <TIM_OC1_SetConfig+0xc8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40010000 	.word	0x40010000

08004950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 0210 	bic.w	r2, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0320 	bic.w	r3, r3, #32
 800499a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004a24 <TIM_OC2_SetConfig+0xd4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10d      	bne.n	80049cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a15      	ldr	r2, [pc, #84]	@ (8004a24 <TIM_OC2_SetConfig+0xd4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d113      	bne.n	80049fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000

08004a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <TIM_OC3_SetConfig+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <TIM_OC3_SetConfig+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d113      	bne.n	8004ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40010000 	.word	0x40010000

08004afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	031b      	lsls	r3, r3, #12
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a10      	ldr	r2, [pc, #64]	@ (8004b98 <TIM_OC4_SetConfig+0x9c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000

08004b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f023 0201 	bic.w	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 030a 	bic.w	r3, r3, #10
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b087      	sub	sp, #28
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 0210 	bic.w	r2, r3, #16
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f043 0307 	orr.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e050      	b.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d80:	d013      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40014000 	.word	0x40014000

08004df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e042      	b.n	8004eb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc faf2 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	@ 0x24
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f973 	bl	8005150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	@ 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d175      	bne.n	8004fcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_UART_Transmit+0x2c>
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e06e      	b.n	8004fce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2221      	movs	r2, #33	@ 0x21
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efe:	f7fc fbf1 	bl	80016e4 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f18:	d108      	bne.n	8004f2c <HAL_UART_Transmit+0x6c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e003      	b.n	8004f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f34:	e02e      	b.n	8004f94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2180      	movs	r1, #128	@ 0x80
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f848 	bl	8004fd6 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e03a      	b.n	8004fce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3302      	adds	r3, #2
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e007      	b.n	8004f86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1cb      	bne.n	8004f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2140      	movs	r1, #64	@ 0x40
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f814 	bl	8004fd6 <UART_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe6:	e03b      	b.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d037      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fc fb78 	bl	80016e4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <UART_WaitOnFlagUntilTimeout+0x30>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e03a      	b.n	8005080 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d023      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d020      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d01d      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d116      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f81d 	bl	8005088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2208      	movs	r2, #8
 8005052:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e00f      	b.n	8005080 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	429a      	cmp	r2, r3
 800507c:	d0b4      	beq.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b095      	sub	sp, #84	@ 0x54
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e5      	bne.n	8005090 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3314      	adds	r3, #20
 80050e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e5      	bne.n	80050c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d119      	bne.n	8005134 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	647b      	str	r3, [r7, #68]	@ 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005120:	61ba      	str	r2, [r7, #24]
 8005122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6979      	ldr	r1, [r7, #20]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	613b      	str	r3, [r7, #16]
   return(result);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005142:	bf00      	nop
 8005144:	3754      	adds	r7, #84	@ 0x54
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005154:	b0c0      	sub	sp, #256	@ 0x100
 8005156:	af00      	add	r7, sp, #0
 8005158:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	68d9      	ldr	r1, [r3, #12]
 800516e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	ea40 0301 	orr.w	r3, r0, r1
 8005178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	431a      	orrs	r2, r3
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	431a      	orrs	r2, r3
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051a8:	f021 010c 	bic.w	r1, r1, #12
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051b6:	430b      	orrs	r3, r1
 80051b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	ea40 0301 	orr.w	r3, r0, r1
 80051d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b8f      	ldr	r3, [pc, #572]	@ (800541c <UART_SetConfig+0x2cc>)
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d005      	beq.n	80051f0 <UART_SetConfig+0xa0>
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005420 <UART_SetConfig+0x2d0>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d104      	bne.n	80051fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fe fe40 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 80051f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051f8:	e003      	b.n	8005202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051fa:	f7fe fe27 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80051fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800520c:	f040 810c 	bne.w	8005428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005214:	2200      	movs	r2, #0
 8005216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800521a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800521e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	1891      	adds	r1, r2, r2
 8005228:	65b9      	str	r1, [r7, #88]	@ 0x58
 800522a:	415b      	adcs	r3, r3
 800522c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800522e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005232:	4621      	mov	r1, r4
 8005234:	eb12 0801 	adds.w	r8, r2, r1
 8005238:	4629      	mov	r1, r5
 800523a:	eb43 0901 	adc.w	r9, r3, r1
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800524a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800524e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005252:	4690      	mov	r8, r2
 8005254:	4699      	mov	r9, r3
 8005256:	4623      	mov	r3, r4
 8005258:	eb18 0303 	adds.w	r3, r8, r3
 800525c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005260:	462b      	mov	r3, r5
 8005262:	eb49 0303 	adc.w	r3, r9, r3
 8005266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005276:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800527a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800527e:	460b      	mov	r3, r1
 8005280:	18db      	adds	r3, r3, r3
 8005282:	653b      	str	r3, [r7, #80]	@ 0x50
 8005284:	4613      	mov	r3, r2
 8005286:	eb42 0303 	adc.w	r3, r2, r3
 800528a:	657b      	str	r3, [r7, #84]	@ 0x54
 800528c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005294:	f7fa fff4 	bl	8000280 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b61      	ldr	r3, [pc, #388]	@ (8005424 <UART_SetConfig+0x2d4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052c0:	415b      	adcs	r3, r3
 80052c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052c8:	4641      	mov	r1, r8
 80052ca:	eb12 0a01 	adds.w	sl, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb43 0b01 	adc.w	fp, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e8:	4692      	mov	sl, r2
 80052ea:	469b      	mov	fp, r3
 80052ec:	4643      	mov	r3, r8
 80052ee:	eb1a 0303 	adds.w	r3, sl, r3
 80052f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052f6:	464b      	mov	r3, r9
 80052f8:	eb4b 0303 	adc.w	r3, fp, r3
 80052fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800530c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005314:	460b      	mov	r3, r1
 8005316:	18db      	adds	r3, r3, r3
 8005318:	643b      	str	r3, [r7, #64]	@ 0x40
 800531a:	4613      	mov	r3, r2
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	647b      	str	r3, [r7, #68]	@ 0x44
 8005322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800532a:	f7fa ffa9 	bl	8000280 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4611      	mov	r1, r2
 8005334:	4b3b      	ldr	r3, [pc, #236]	@ (8005424 <UART_SetConfig+0x2d4>)
 8005336:	fba3 2301 	umull	r2, r3, r3, r1
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2264      	movs	r2, #100	@ 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	1acb      	subs	r3, r1, r3
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800534a:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <UART_SetConfig+0x2d4>)
 800534c:	fba3 2302 	umull	r2, r3, r3, r2
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005358:	441c      	add	r4, r3
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005364:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005374:	415b      	adcs	r3, r3
 8005376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6339      	str	r1, [r7, #48]	@ 0x30
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053d0:	460b      	mov	r3, r1
 80053d2:	18db      	adds	r3, r3, r3
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d6:	4613      	mov	r3, r2
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053e6:	f7fa ff4b 	bl	8000280 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	@ 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	@ 0x32
 8005402:	4a08      	ldr	r2, [pc, #32]	@ (8005424 <UART_SetConfig+0x2d4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4422      	add	r2, r4
 8005416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005418:	e106      	b.n	8005628 <UART_SetConfig+0x4d8>
 800541a:	bf00      	nop
 800541c:	40011000 	.word	0x40011000
 8005420:	40011400 	.word	0x40011400
 8005424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542c:	2200      	movs	r2, #0
 800542e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005432:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800543a:	4642      	mov	r2, r8
 800543c:	464b      	mov	r3, r9
 800543e:	1891      	adds	r1, r2, r2
 8005440:	6239      	str	r1, [r7, #32]
 8005442:	415b      	adcs	r3, r3
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
 8005446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800544a:	4641      	mov	r1, r8
 800544c:	1854      	adds	r4, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb43 0501 	adc.w	r5, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	00eb      	lsls	r3, r5, #3
 800545e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005462:	00e2      	lsls	r2, r4, #3
 8005464:	4614      	mov	r4, r2
 8005466:	461d      	mov	r5, r3
 8005468:	4643      	mov	r3, r8
 800546a:	18e3      	adds	r3, r4, r3
 800546c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005470:	464b      	mov	r3, r9
 8005472:	eb45 0303 	adc.w	r3, r5, r3
 8005476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005486:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005496:	4629      	mov	r1, r5
 8005498:	008b      	lsls	r3, r1, #2
 800549a:	4621      	mov	r1, r4
 800549c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a0:	4621      	mov	r1, r4
 80054a2:	008a      	lsls	r2, r1, #2
 80054a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054a8:	f7fa feea 	bl	8000280 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b60      	ldr	r3, [pc, #384]	@ (8005634 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011c      	lsls	r4, r3, #4
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	61b9      	str	r1, [r7, #24]
 80054d4:	415b      	adcs	r3, r3
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054dc:	4641      	mov	r1, r8
 80054de:	1851      	adds	r1, r2, r1
 80054e0:	6139      	str	r1, [r7, #16]
 80054e2:	4649      	mov	r1, r9
 80054e4:	414b      	adcs	r3, r1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f4:	4659      	mov	r1, fp
 80054f6:	00cb      	lsls	r3, r1, #3
 80054f8:	4651      	mov	r1, sl
 80054fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054fe:	4651      	mov	r1, sl
 8005500:	00ca      	lsls	r2, r1, #3
 8005502:	4610      	mov	r0, r2
 8005504:	4619      	mov	r1, r3
 8005506:	4603      	mov	r3, r0
 8005508:	4642      	mov	r2, r8
 800550a:	189b      	adds	r3, r3, r2
 800550c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005510:	464b      	mov	r3, r9
 8005512:	460a      	mov	r2, r1
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005526:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005534:	4649      	mov	r1, r9
 8005536:	008b      	lsls	r3, r1, #2
 8005538:	4641      	mov	r1, r8
 800553a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800553e:	4641      	mov	r1, r8
 8005540:	008a      	lsls	r2, r1, #2
 8005542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005546:	f7fa fe9b 	bl	8000280 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4611      	mov	r1, r2
 8005550:	4b38      	ldr	r3, [pc, #224]	@ (8005634 <UART_SetConfig+0x4e4>)
 8005552:	fba3 2301 	umull	r2, r3, r3, r1
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2264      	movs	r2, #100	@ 0x64
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	1acb      	subs	r3, r1, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	@ 0x32
 8005564:	4a33      	ldr	r2, [pc, #204]	@ (8005634 <UART_SetConfig+0x4e4>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005570:	441c      	add	r4, r3
 8005572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005576:	2200      	movs	r2, #0
 8005578:	673b      	str	r3, [r7, #112]	@ 0x70
 800557a:	677a      	str	r2, [r7, #116]	@ 0x74
 800557c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	415b      	adcs	r3, r3
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6039      	str	r1, [r7, #0]
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055c2:	464b      	mov	r3, r9
 80055c4:	460a      	mov	r2, r1
 80055c6:	eb42 0303 	adc.w	r3, r2, r3
 80055ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80055d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055f6:	f7fa fe43 	bl	8000280 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <UART_SetConfig+0x4e4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	@ 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	@ 0x32
 8005612:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <UART_SetConfig+0x4e4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4422      	add	r2, r4
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	bf00      	nop
 800562a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800562e:	46bd      	mov	sp, r7
 8005630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005634:	51eb851f 	.word	0x51eb851f

08005638 <siprintf>:
 8005638:	b40e      	push	{r1, r2, r3}
 800563a:	b500      	push	{lr}
 800563c:	b09c      	sub	sp, #112	@ 0x70
 800563e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005640:	9002      	str	r0, [sp, #8]
 8005642:	9006      	str	r0, [sp, #24]
 8005644:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005648:	4809      	ldr	r0, [pc, #36]	@ (8005670 <siprintf+0x38>)
 800564a:	9107      	str	r1, [sp, #28]
 800564c:	9104      	str	r1, [sp, #16]
 800564e:	4909      	ldr	r1, [pc, #36]	@ (8005674 <siprintf+0x3c>)
 8005650:	f853 2b04 	ldr.w	r2, [r3], #4
 8005654:	9105      	str	r1, [sp, #20]
 8005656:	6800      	ldr	r0, [r0, #0]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	a902      	add	r1, sp, #8
 800565c:	f000 f994 	bl	8005988 <_svfiprintf_r>
 8005660:	9b02      	ldr	r3, [sp, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	b01c      	add	sp, #112	@ 0x70
 8005668:	f85d eb04 	ldr.w	lr, [sp], #4
 800566c:	b003      	add	sp, #12
 800566e:	4770      	bx	lr
 8005670:	20000010 	.word	0x20000010
 8005674:	ffff0208 	.word	0xffff0208

08005678 <memset>:
 8005678:	4402      	add	r2, r0
 800567a:	4603      	mov	r3, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <__errno>:
 8005688:	4b01      	ldr	r3, [pc, #4]	@ (8005690 <__errno+0x8>)
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010

08005694 <__libc_init_array>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	4d0d      	ldr	r5, [pc, #52]	@ (80056cc <__libc_init_array+0x38>)
 8005698:	4c0d      	ldr	r4, [pc, #52]	@ (80056d0 <__libc_init_array+0x3c>)
 800569a:	1b64      	subs	r4, r4, r5
 800569c:	10a4      	asrs	r4, r4, #2
 800569e:	2600      	movs	r6, #0
 80056a0:	42a6      	cmp	r6, r4
 80056a2:	d109      	bne.n	80056b8 <__libc_init_array+0x24>
 80056a4:	4d0b      	ldr	r5, [pc, #44]	@ (80056d4 <__libc_init_array+0x40>)
 80056a6:	4c0c      	ldr	r4, [pc, #48]	@ (80056d8 <__libc_init_array+0x44>)
 80056a8:	f000 fc66 	bl	8005f78 <_init>
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	2600      	movs	r6, #0
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	d105      	bne.n	80056c2 <__libc_init_array+0x2e>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056bc:	4798      	blx	r3
 80056be:	3601      	adds	r6, #1
 80056c0:	e7ee      	b.n	80056a0 <__libc_init_array+0xc>
 80056c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c6:	4798      	blx	r3
 80056c8:	3601      	adds	r6, #1
 80056ca:	e7f2      	b.n	80056b2 <__libc_init_array+0x1e>
 80056cc:	08006030 	.word	0x08006030
 80056d0:	08006030 	.word	0x08006030
 80056d4:	08006030 	.word	0x08006030
 80056d8:	08006034 	.word	0x08006034

080056dc <__retarget_lock_acquire_recursive>:
 80056dc:	4770      	bx	lr

080056de <__retarget_lock_release_recursive>:
 80056de:	4770      	bx	lr

080056e0 <_free_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4605      	mov	r5, r0
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d041      	beq.n	800576c <_free_r+0x8c>
 80056e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ec:	1f0c      	subs	r4, r1, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfb8      	it	lt
 80056f2:	18e4      	addlt	r4, r4, r3
 80056f4:	f000 f8e0 	bl	80058b8 <__malloc_lock>
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <_free_r+0x90>)
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	b933      	cbnz	r3, 800570c <_free_r+0x2c>
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	4628      	mov	r0, r5
 8005704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005708:	f000 b8dc 	b.w	80058c4 <__malloc_unlock>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d908      	bls.n	8005722 <_free_r+0x42>
 8005710:	6820      	ldr	r0, [r4, #0]
 8005712:	1821      	adds	r1, r4, r0
 8005714:	428b      	cmp	r3, r1
 8005716:	bf01      	itttt	eq
 8005718:	6819      	ldreq	r1, [r3, #0]
 800571a:	685b      	ldreq	r3, [r3, #4]
 800571c:	1809      	addeq	r1, r1, r0
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	e7ed      	b.n	80056fe <_free_r+0x1e>
 8005722:	461a      	mov	r2, r3
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b10b      	cbz	r3, 800572c <_free_r+0x4c>
 8005728:	42a3      	cmp	r3, r4
 800572a:	d9fa      	bls.n	8005722 <_free_r+0x42>
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	1850      	adds	r0, r2, r1
 8005730:	42a0      	cmp	r0, r4
 8005732:	d10b      	bne.n	800574c <_free_r+0x6c>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	4401      	add	r1, r0
 8005738:	1850      	adds	r0, r2, r1
 800573a:	4283      	cmp	r3, r0
 800573c:	6011      	str	r1, [r2, #0]
 800573e:	d1e0      	bne.n	8005702 <_free_r+0x22>
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	6053      	str	r3, [r2, #4]
 8005746:	4408      	add	r0, r1
 8005748:	6010      	str	r0, [r2, #0]
 800574a:	e7da      	b.n	8005702 <_free_r+0x22>
 800574c:	d902      	bls.n	8005754 <_free_r+0x74>
 800574e:	230c      	movs	r3, #12
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	e7d6      	b.n	8005702 <_free_r+0x22>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	1821      	adds	r1, r4, r0
 8005758:	428b      	cmp	r3, r1
 800575a:	bf04      	itt	eq
 800575c:	6819      	ldreq	r1, [r3, #0]
 800575e:	685b      	ldreq	r3, [r3, #4]
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	bf04      	itt	eq
 8005764:	1809      	addeq	r1, r1, r0
 8005766:	6021      	streq	r1, [r4, #0]
 8005768:	6054      	str	r4, [r2, #4]
 800576a:	e7ca      	b.n	8005702 <_free_r+0x22>
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	200003b4 	.word	0x200003b4

08005774 <sbrk_aligned>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0f      	ldr	r6, [pc, #60]	@ (80057b4 <sbrk_aligned+0x40>)
 8005778:	460c      	mov	r4, r1
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	4605      	mov	r5, r0
 800577e:	b911      	cbnz	r1, 8005786 <sbrk_aligned+0x12>
 8005780:	f000 fba6 	bl	8005ed0 <_sbrk_r>
 8005784:	6030      	str	r0, [r6, #0]
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fba1 	bl	8005ed0 <_sbrk_r>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d103      	bne.n	800579a <sbrk_aligned+0x26>
 8005792:	f04f 34ff 	mov.w	r4, #4294967295
 8005796:	4620      	mov	r0, r4
 8005798:	bd70      	pop	{r4, r5, r6, pc}
 800579a:	1cc4      	adds	r4, r0, #3
 800579c:	f024 0403 	bic.w	r4, r4, #3
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d0f8      	beq.n	8005796 <sbrk_aligned+0x22>
 80057a4:	1a21      	subs	r1, r4, r0
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fb92 	bl	8005ed0 <_sbrk_r>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d1f2      	bne.n	8005796 <sbrk_aligned+0x22>
 80057b0:	e7ef      	b.n	8005792 <sbrk_aligned+0x1e>
 80057b2:	bf00      	nop
 80057b4:	200003b0 	.word	0x200003b0

080057b8 <_malloc_r>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	1ccd      	adds	r5, r1, #3
 80057be:	f025 0503 	bic.w	r5, r5, #3
 80057c2:	3508      	adds	r5, #8
 80057c4:	2d0c      	cmp	r5, #12
 80057c6:	bf38      	it	cc
 80057c8:	250c      	movcc	r5, #12
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	4606      	mov	r6, r0
 80057ce:	db01      	blt.n	80057d4 <_malloc_r+0x1c>
 80057d0:	42a9      	cmp	r1, r5
 80057d2:	d904      	bls.n	80057de <_malloc_r+0x26>
 80057d4:	230c      	movs	r3, #12
 80057d6:	6033      	str	r3, [r6, #0]
 80057d8:	2000      	movs	r0, #0
 80057da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058b4 <_malloc_r+0xfc>
 80057e2:	f000 f869 	bl	80058b8 <__malloc_lock>
 80057e6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ea:	461c      	mov	r4, r3
 80057ec:	bb44      	cbnz	r4, 8005840 <_malloc_r+0x88>
 80057ee:	4629      	mov	r1, r5
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff ffbf 	bl	8005774 <sbrk_aligned>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	4604      	mov	r4, r0
 80057fa:	d158      	bne.n	80058ae <_malloc_r+0xf6>
 80057fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005800:	4627      	mov	r7, r4
 8005802:	2f00      	cmp	r7, #0
 8005804:	d143      	bne.n	800588e <_malloc_r+0xd6>
 8005806:	2c00      	cmp	r4, #0
 8005808:	d04b      	beq.n	80058a2 <_malloc_r+0xea>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	eb04 0903 	add.w	r9, r4, r3
 8005814:	f000 fb5c 	bl	8005ed0 <_sbrk_r>
 8005818:	4581      	cmp	r9, r0
 800581a:	d142      	bne.n	80058a2 <_malloc_r+0xea>
 800581c:	6821      	ldr	r1, [r4, #0]
 800581e:	1a6d      	subs	r5, r5, r1
 8005820:	4629      	mov	r1, r5
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff ffa6 	bl	8005774 <sbrk_aligned>
 8005828:	3001      	adds	r0, #1
 800582a:	d03a      	beq.n	80058a2 <_malloc_r+0xea>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	442b      	add	r3, r5
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	bb62      	cbnz	r2, 8005894 <_malloc_r+0xdc>
 800583a:	f8c8 7000 	str.w	r7, [r8]
 800583e:	e00f      	b.n	8005860 <_malloc_r+0xa8>
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	1b52      	subs	r2, r2, r5
 8005844:	d420      	bmi.n	8005888 <_malloc_r+0xd0>
 8005846:	2a0b      	cmp	r2, #11
 8005848:	d917      	bls.n	800587a <_malloc_r+0xc2>
 800584a:	1961      	adds	r1, r4, r5
 800584c:	42a3      	cmp	r3, r4
 800584e:	6025      	str	r5, [r4, #0]
 8005850:	bf18      	it	ne
 8005852:	6059      	strne	r1, [r3, #4]
 8005854:	6863      	ldr	r3, [r4, #4]
 8005856:	bf08      	it	eq
 8005858:	f8c8 1000 	streq.w	r1, [r8]
 800585c:	5162      	str	r2, [r4, r5]
 800585e:	604b      	str	r3, [r1, #4]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f82f 	bl	80058c4 <__malloc_unlock>
 8005866:	f104 000b 	add.w	r0, r4, #11
 800586a:	1d23      	adds	r3, r4, #4
 800586c:	f020 0007 	bic.w	r0, r0, #7
 8005870:	1ac2      	subs	r2, r0, r3
 8005872:	bf1c      	itt	ne
 8005874:	1a1b      	subne	r3, r3, r0
 8005876:	50a3      	strne	r3, [r4, r2]
 8005878:	e7af      	b.n	80057da <_malloc_r+0x22>
 800587a:	6862      	ldr	r2, [r4, #4]
 800587c:	42a3      	cmp	r3, r4
 800587e:	bf0c      	ite	eq
 8005880:	f8c8 2000 	streq.w	r2, [r8]
 8005884:	605a      	strne	r2, [r3, #4]
 8005886:	e7eb      	b.n	8005860 <_malloc_r+0xa8>
 8005888:	4623      	mov	r3, r4
 800588a:	6864      	ldr	r4, [r4, #4]
 800588c:	e7ae      	b.n	80057ec <_malloc_r+0x34>
 800588e:	463c      	mov	r4, r7
 8005890:	687f      	ldr	r7, [r7, #4]
 8005892:	e7b6      	b.n	8005802 <_malloc_r+0x4a>
 8005894:	461a      	mov	r2, r3
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	42a3      	cmp	r3, r4
 800589a:	d1fb      	bne.n	8005894 <_malloc_r+0xdc>
 800589c:	2300      	movs	r3, #0
 800589e:	6053      	str	r3, [r2, #4]
 80058a0:	e7de      	b.n	8005860 <_malloc_r+0xa8>
 80058a2:	230c      	movs	r3, #12
 80058a4:	6033      	str	r3, [r6, #0]
 80058a6:	4630      	mov	r0, r6
 80058a8:	f000 f80c 	bl	80058c4 <__malloc_unlock>
 80058ac:	e794      	b.n	80057d8 <_malloc_r+0x20>
 80058ae:	6005      	str	r5, [r0, #0]
 80058b0:	e7d6      	b.n	8005860 <_malloc_r+0xa8>
 80058b2:	bf00      	nop
 80058b4:	200003b4 	.word	0x200003b4

080058b8 <__malloc_lock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	@ (80058c0 <__malloc_lock+0x8>)
 80058ba:	f7ff bf0f 	b.w	80056dc <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	200003ac 	.word	0x200003ac

080058c4 <__malloc_unlock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	@ (80058cc <__malloc_unlock+0x8>)
 80058c6:	f7ff bf0a 	b.w	80056de <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	200003ac 	.word	0x200003ac

080058d0 <__ssputs_r>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	688e      	ldr	r6, [r1, #8]
 80058d6:	461f      	mov	r7, r3
 80058d8:	42be      	cmp	r6, r7
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	4682      	mov	sl, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	4690      	mov	r8, r2
 80058e2:	d82d      	bhi.n	8005940 <__ssputs_r+0x70>
 80058e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058ec:	d026      	beq.n	800593c <__ssputs_r+0x6c>
 80058ee:	6965      	ldr	r5, [r4, #20]
 80058f0:	6909      	ldr	r1, [r1, #16]
 80058f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f6:	eba3 0901 	sub.w	r9, r3, r1
 80058fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058fe:	1c7b      	adds	r3, r7, #1
 8005900:	444b      	add	r3, r9
 8005902:	106d      	asrs	r5, r5, #1
 8005904:	429d      	cmp	r5, r3
 8005906:	bf38      	it	cc
 8005908:	461d      	movcc	r5, r3
 800590a:	0553      	lsls	r3, r2, #21
 800590c:	d527      	bpl.n	800595e <__ssputs_r+0x8e>
 800590e:	4629      	mov	r1, r5
 8005910:	f7ff ff52 	bl	80057b8 <_malloc_r>
 8005914:	4606      	mov	r6, r0
 8005916:	b360      	cbz	r0, 8005972 <__ssputs_r+0xa2>
 8005918:	6921      	ldr	r1, [r4, #16]
 800591a:	464a      	mov	r2, r9
 800591c:	f000 fae8 	bl	8005ef0 <memcpy>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592a:	81a3      	strh	r3, [r4, #12]
 800592c:	6126      	str	r6, [r4, #16]
 800592e:	6165      	str	r5, [r4, #20]
 8005930:	444e      	add	r6, r9
 8005932:	eba5 0509 	sub.w	r5, r5, r9
 8005936:	6026      	str	r6, [r4, #0]
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	463e      	mov	r6, r7
 800593c:	42be      	cmp	r6, r7
 800593e:	d900      	bls.n	8005942 <__ssputs_r+0x72>
 8005940:	463e      	mov	r6, r7
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	4632      	mov	r2, r6
 8005946:	4641      	mov	r1, r8
 8005948:	f000 faa8 	bl	8005e9c <memmove>
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	1b9b      	subs	r3, r3, r6
 8005950:	60a3      	str	r3, [r4, #8]
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	4433      	add	r3, r6
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	2000      	movs	r0, #0
 800595a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595e:	462a      	mov	r2, r5
 8005960:	f000 fad4 	bl	8005f0c <_realloc_r>
 8005964:	4606      	mov	r6, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d1e0      	bne.n	800592c <__ssputs_r+0x5c>
 800596a:	6921      	ldr	r1, [r4, #16]
 800596c:	4650      	mov	r0, sl
 800596e:	f7ff feb7 	bl	80056e0 <_free_r>
 8005972:	230c      	movs	r3, #12
 8005974:	f8ca 3000 	str.w	r3, [sl]
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e7e9      	b.n	800595a <__ssputs_r+0x8a>
	...

08005988 <_svfiprintf_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	4698      	mov	r8, r3
 800598e:	898b      	ldrh	r3, [r1, #12]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	b09d      	sub	sp, #116	@ 0x74
 8005994:	4607      	mov	r7, r0
 8005996:	460d      	mov	r5, r1
 8005998:	4614      	mov	r4, r2
 800599a:	d510      	bpl.n	80059be <_svfiprintf_r+0x36>
 800599c:	690b      	ldr	r3, [r1, #16]
 800599e:	b973      	cbnz	r3, 80059be <_svfiprintf_r+0x36>
 80059a0:	2140      	movs	r1, #64	@ 0x40
 80059a2:	f7ff ff09 	bl	80057b8 <_malloc_r>
 80059a6:	6028      	str	r0, [r5, #0]
 80059a8:	6128      	str	r0, [r5, #16]
 80059aa:	b930      	cbnz	r0, 80059ba <_svfiprintf_r+0x32>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	b01d      	add	sp, #116	@ 0x74
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	2340      	movs	r3, #64	@ 0x40
 80059bc:	616b      	str	r3, [r5, #20]
 80059be:	2300      	movs	r3, #0
 80059c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c2:	2320      	movs	r3, #32
 80059c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059cc:	2330      	movs	r3, #48	@ 0x30
 80059ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b6c <_svfiprintf_r+0x1e4>
 80059d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d6:	f04f 0901 	mov.w	r9, #1
 80059da:	4623      	mov	r3, r4
 80059dc:	469a      	mov	sl, r3
 80059de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e2:	b10a      	cbz	r2, 80059e8 <_svfiprintf_r+0x60>
 80059e4:	2a25      	cmp	r2, #37	@ 0x25
 80059e6:	d1f9      	bne.n	80059dc <_svfiprintf_r+0x54>
 80059e8:	ebba 0b04 	subs.w	fp, sl, r4
 80059ec:	d00b      	beq.n	8005a06 <_svfiprintf_r+0x7e>
 80059ee:	465b      	mov	r3, fp
 80059f0:	4622      	mov	r2, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ff6b 	bl	80058d0 <__ssputs_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	f000 80a7 	beq.w	8005b4e <_svfiprintf_r+0x1c6>
 8005a00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a02:	445a      	add	r2, fp
 8005a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a06:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 809f 	beq.w	8005b4e <_svfiprintf_r+0x1c6>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1a:	f10a 0a01 	add.w	sl, sl, #1
 8005a1e:	9304      	str	r3, [sp, #16]
 8005a20:	9307      	str	r3, [sp, #28]
 8005a22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a26:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2205      	movs	r2, #5
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	484e      	ldr	r0, [pc, #312]	@ (8005b6c <_svfiprintf_r+0x1e4>)
 8005a32:	f7fa fbd5 	bl	80001e0 <memchr>
 8005a36:	9a04      	ldr	r2, [sp, #16]
 8005a38:	b9d8      	cbnz	r0, 8005a72 <_svfiprintf_r+0xea>
 8005a3a:	06d0      	lsls	r0, r2, #27
 8005a3c:	bf44      	itt	mi
 8005a3e:	2320      	movmi	r3, #32
 8005a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a44:	0711      	lsls	r1, r2, #28
 8005a46:	bf44      	itt	mi
 8005a48:	232b      	movmi	r3, #43	@ 0x2b
 8005a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a54:	d015      	beq.n	8005a82 <_svfiprintf_r+0xfa>
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	4654      	mov	r4, sl
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f04f 0c0a 	mov.w	ip, #10
 8005a60:	4621      	mov	r1, r4
 8005a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a66:	3b30      	subs	r3, #48	@ 0x30
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d94b      	bls.n	8005b04 <_svfiprintf_r+0x17c>
 8005a6c:	b1b0      	cbz	r0, 8005a9c <_svfiprintf_r+0x114>
 8005a6e:	9207      	str	r2, [sp, #28]
 8005a70:	e014      	b.n	8005a9c <_svfiprintf_r+0x114>
 8005a72:	eba0 0308 	sub.w	r3, r0, r8
 8005a76:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	46a2      	mov	sl, r4
 8005a80:	e7d2      	b.n	8005a28 <_svfiprintf_r+0xa0>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	9103      	str	r1, [sp, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfbb      	ittet	lt
 8005a8e:	425b      	neglt	r3, r3
 8005a90:	f042 0202 	orrlt.w	r2, r2, #2
 8005a94:	9307      	strge	r3, [sp, #28]
 8005a96:	9307      	strlt	r3, [sp, #28]
 8005a98:	bfb8      	it	lt
 8005a9a:	9204      	strlt	r2, [sp, #16]
 8005a9c:	7823      	ldrb	r3, [r4, #0]
 8005a9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa0:	d10a      	bne.n	8005ab8 <_svfiprintf_r+0x130>
 8005aa2:	7863      	ldrb	r3, [r4, #1]
 8005aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa6:	d132      	bne.n	8005b0e <_svfiprintf_r+0x186>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9203      	str	r2, [sp, #12]
 8005ab0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab4:	3402      	adds	r4, #2
 8005ab6:	9305      	str	r3, [sp, #20]
 8005ab8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b7c <_svfiprintf_r+0x1f4>
 8005abc:	7821      	ldrb	r1, [r4, #0]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	f7fa fb8d 	bl	80001e0 <memchr>
 8005ac6:	b138      	cbz	r0, 8005ad8 <_svfiprintf_r+0x150>
 8005ac8:	9b04      	ldr	r3, [sp, #16]
 8005aca:	eba0 000a 	sub.w	r0, r0, sl
 8005ace:	2240      	movs	r2, #64	@ 0x40
 8005ad0:	4082      	lsls	r2, r0
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	3401      	adds	r4, #1
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005adc:	4824      	ldr	r0, [pc, #144]	@ (8005b70 <_svfiprintf_r+0x1e8>)
 8005ade:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	f7fa fb7c 	bl	80001e0 <memchr>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d036      	beq.n	8005b5a <_svfiprintf_r+0x1d2>
 8005aec:	4b21      	ldr	r3, [pc, #132]	@ (8005b74 <_svfiprintf_r+0x1ec>)
 8005aee:	bb1b      	cbnz	r3, 8005b38 <_svfiprintf_r+0x1b0>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	3307      	adds	r3, #7
 8005af4:	f023 0307 	bic.w	r3, r3, #7
 8005af8:	3308      	adds	r3, #8
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afe:	4433      	add	r3, r6
 8005b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b02:	e76a      	b.n	80059da <_svfiprintf_r+0x52>
 8005b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b08:	460c      	mov	r4, r1
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e7a8      	b.n	8005a60 <_svfiprintf_r+0xd8>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	3401      	adds	r4, #1
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	4619      	mov	r1, r3
 8005b16:	f04f 0c0a 	mov.w	ip, #10
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b20:	3a30      	subs	r2, #48	@ 0x30
 8005b22:	2a09      	cmp	r2, #9
 8005b24:	d903      	bls.n	8005b2e <_svfiprintf_r+0x1a6>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0c6      	beq.n	8005ab8 <_svfiprintf_r+0x130>
 8005b2a:	9105      	str	r1, [sp, #20]
 8005b2c:	e7c4      	b.n	8005ab8 <_svfiprintf_r+0x130>
 8005b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b32:	4604      	mov	r4, r0
 8005b34:	2301      	movs	r3, #1
 8005b36:	e7f0      	b.n	8005b1a <_svfiprintf_r+0x192>
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b78 <_svfiprintf_r+0x1f0>)
 8005b40:	a904      	add	r1, sp, #16
 8005b42:	4638      	mov	r0, r7
 8005b44:	f3af 8000 	nop.w
 8005b48:	1c42      	adds	r2, r0, #1
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	d1d6      	bne.n	8005afc <_svfiprintf_r+0x174>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	065b      	lsls	r3, r3, #25
 8005b52:	f53f af2d 	bmi.w	80059b0 <_svfiprintf_r+0x28>
 8005b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b58:	e72c      	b.n	80059b4 <_svfiprintf_r+0x2c>
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	462a      	mov	r2, r5
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <_svfiprintf_r+0x1f0>)
 8005b62:	a904      	add	r1, sp, #16
 8005b64:	4638      	mov	r0, r7
 8005b66:	f000 f879 	bl	8005c5c <_printf_i>
 8005b6a:	e7ed      	b.n	8005b48 <_svfiprintf_r+0x1c0>
 8005b6c:	08005ff4 	.word	0x08005ff4
 8005b70:	08005ffe 	.word	0x08005ffe
 8005b74:	00000000 	.word	0x00000000
 8005b78:	080058d1 	.word	0x080058d1
 8005b7c:	08005ffa 	.word	0x08005ffa

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4616      	mov	r6, r2
 8005b86:	4698      	mov	r8, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfb8      	it	lt
 8005b94:	4613      	movlt	r3, r2
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b10a      	cbz	r2, 8005ba6 <_printf_common+0x26>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	0699      	lsls	r1, r3, #26
 8005baa:	bf42      	ittt	mi
 8005bac:	6833      	ldrmi	r3, [r6, #0]
 8005bae:	3302      	addmi	r3, #2
 8005bb0:	6033      	strmi	r3, [r6, #0]
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	f015 0506 	ands.w	r5, r5, #6
 8005bb8:	d106      	bne.n	8005bc8 <_printf_common+0x48>
 8005bba:	f104 0a19 	add.w	sl, r4, #25
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	6832      	ldr	r2, [r6, #0]
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dc26      	bgt.n	8005c16 <_printf_common+0x96>
 8005bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	3b00      	subs	r3, #0
 8005bd0:	bf18      	it	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	0692      	lsls	r2, r2, #26
 8005bd6:	d42b      	bmi.n	8005c30 <_printf_common+0xb0>
 8005bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bdc:	4641      	mov	r1, r8
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c8      	blx	r9
 8005be2:	3001      	adds	r0, #1
 8005be4:	d01e      	beq.n	8005c24 <_printf_common+0xa4>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	f003 0306 	and.w	r3, r3, #6
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	bf02      	ittt	eq
 8005bf2:	68e5      	ldreq	r5, [r4, #12]
 8005bf4:	6833      	ldreq	r3, [r6, #0]
 8005bf6:	1aed      	subeq	r5, r5, r3
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	bf0c      	ite	eq
 8005bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c00:	2500      	movne	r5, #0
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bfc4      	itt	gt
 8005c06:	1a9b      	subgt	r3, r3, r2
 8005c08:	18ed      	addgt	r5, r5, r3
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	341a      	adds	r4, #26
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d11a      	bne.n	8005c48 <_printf_common+0xc8>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e008      	b.n	8005c28 <_printf_common+0xa8>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	47c8      	blx	r9
 8005c20:	3001      	adds	r0, #1
 8005c22:	d103      	bne.n	8005c2c <_printf_common+0xac>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7c6      	b.n	8005bbe <_printf_common+0x3e>
 8005c30:	18e1      	adds	r1, r4, r3
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	2030      	movs	r0, #48	@ 0x30
 8005c36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c3a:	4422      	add	r2, r4
 8005c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c44:	3302      	adds	r3, #2
 8005c46:	e7c7      	b.n	8005bd8 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c8      	blx	r9
 8005c52:	3001      	adds	r0, #1
 8005c54:	d0e6      	beq.n	8005c24 <_printf_common+0xa4>
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7d9      	b.n	8005c0e <_printf_common+0x8e>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	7e0f      	ldrb	r7, [r1, #24]
 8005c62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c64:	2f78      	cmp	r7, #120	@ 0x78
 8005c66:	4691      	mov	r9, r2
 8005c68:	4680      	mov	r8, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c72:	d807      	bhi.n	8005c84 <_printf_i+0x28>
 8005c74:	2f62      	cmp	r7, #98	@ 0x62
 8005c76:	d80a      	bhi.n	8005c8e <_printf_i+0x32>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f000 80d2 	beq.w	8005e22 <_printf_i+0x1c6>
 8005c7e:	2f58      	cmp	r7, #88	@ 0x58
 8005c80:	f000 80b9 	beq.w	8005df6 <_printf_i+0x19a>
 8005c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c8c:	e03a      	b.n	8005d04 <_printf_i+0xa8>
 8005c8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c92:	2b15      	cmp	r3, #21
 8005c94:	d8f6      	bhi.n	8005c84 <_printf_i+0x28>
 8005c96:	a101      	add	r1, pc, #4	@ (adr r1, 8005c9c <_printf_i+0x40>)
 8005c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005c85 	.word	0x08005c85
 8005ca8:	08005c85 	.word	0x08005c85
 8005cac:	08005c85 	.word	0x08005c85
 8005cb0:	08005c85 	.word	0x08005c85
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c85 	.word	0x08005c85
 8005cbc:	08005c85 	.word	0x08005c85
 8005cc0:	08005c85 	.word	0x08005c85
 8005cc4:	08005c85 	.word	0x08005c85
 8005cc8:	08005e09 	.word	0x08005e09
 8005ccc:	08005d33 	.word	0x08005d33
 8005cd0:	08005dc3 	.word	0x08005dc3
 8005cd4:	08005c85 	.word	0x08005c85
 8005cd8:	08005c85 	.word	0x08005c85
 8005cdc:	08005e2b 	.word	0x08005e2b
 8005ce0:	08005c85 	.word	0x08005c85
 8005ce4:	08005d33 	.word	0x08005d33
 8005ce8:	08005c85 	.word	0x08005c85
 8005cec:	08005c85 	.word	0x08005c85
 8005cf0:	08005dcb 	.word	0x08005dcb
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6032      	str	r2, [r6, #0]
 8005cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d04:	2301      	movs	r3, #1
 8005d06:	e09d      	b.n	8005e44 <_printf_i+0x1e8>
 8005d08:	6833      	ldr	r3, [r6, #0]
 8005d0a:	6820      	ldr	r0, [r4, #0]
 8005d0c:	1d19      	adds	r1, r3, #4
 8005d0e:	6031      	str	r1, [r6, #0]
 8005d10:	0606      	lsls	r6, r0, #24
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0xbc>
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	e003      	b.n	8005d20 <_printf_i+0xc4>
 8005d18:	0645      	lsls	r5, r0, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0xb8>
 8005d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_i+0xd0>
 8005d24:	232d      	movs	r3, #45	@ 0x2d
 8005d26:	426d      	negs	r5, r5
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d2c:	4859      	ldr	r0, [pc, #356]	@ (8005e94 <_printf_i+0x238>)
 8005d2e:	230a      	movs	r3, #10
 8005d30:	e011      	b.n	8005d56 <_printf_i+0xfa>
 8005d32:	6821      	ldr	r1, [r4, #0]
 8005d34:	6833      	ldr	r3, [r6, #0]
 8005d36:	0608      	lsls	r0, r1, #24
 8005d38:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d3c:	d402      	bmi.n	8005d44 <_printf_i+0xe8>
 8005d3e:	0649      	lsls	r1, r1, #25
 8005d40:	bf48      	it	mi
 8005d42:	b2ad      	uxthmi	r5, r5
 8005d44:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d46:	4853      	ldr	r0, [pc, #332]	@ (8005e94 <_printf_i+0x238>)
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	bf14      	ite	ne
 8005d4c:	230a      	movne	r3, #10
 8005d4e:	2308      	moveq	r3, #8
 8005d50:	2100      	movs	r1, #0
 8005d52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d56:	6866      	ldr	r6, [r4, #4]
 8005d58:	60a6      	str	r6, [r4, #8]
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	bfa2      	ittt	ge
 8005d5e:	6821      	ldrge	r1, [r4, #0]
 8005d60:	f021 0104 	bicge.w	r1, r1, #4
 8005d64:	6021      	strge	r1, [r4, #0]
 8005d66:	b90d      	cbnz	r5, 8005d6c <_printf_i+0x110>
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	d04b      	beq.n	8005e04 <_printf_i+0x1a8>
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d72:	fb03 5711 	mls	r7, r3, r1, r5
 8005d76:	5dc7      	ldrb	r7, [r0, r7]
 8005d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d7c:	462f      	mov	r7, r5
 8005d7e:	42bb      	cmp	r3, r7
 8005d80:	460d      	mov	r5, r1
 8005d82:	d9f4      	bls.n	8005d6e <_printf_i+0x112>
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d10b      	bne.n	8005da0 <_printf_i+0x144>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07df      	lsls	r7, r3, #31
 8005d8c:	d508      	bpl.n	8005da0 <_printf_i+0x144>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	6861      	ldr	r1, [r4, #4]
 8005d92:	4299      	cmp	r1, r3
 8005d94:	bfde      	ittt	le
 8005d96:	2330      	movle	r3, #48	@ 0x30
 8005d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005da0:	1b92      	subs	r2, r2, r6
 8005da2:	6122      	str	r2, [r4, #16]
 8005da4:	f8cd a000 	str.w	sl, [sp]
 8005da8:	464b      	mov	r3, r9
 8005daa:	aa03      	add	r2, sp, #12
 8005dac:	4621      	mov	r1, r4
 8005dae:	4640      	mov	r0, r8
 8005db0:	f7ff fee6 	bl	8005b80 <_printf_common>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d14a      	bne.n	8005e4e <_printf_i+0x1f2>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	b004      	add	sp, #16
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	f043 0320 	orr.w	r3, r3, #32
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	4833      	ldr	r0, [pc, #204]	@ (8005e98 <_printf_i+0x23c>)
 8005dcc:	2778      	movs	r7, #120	@ 0x78
 8005dce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	6831      	ldr	r1, [r6, #0]
 8005dd6:	061f      	lsls	r7, r3, #24
 8005dd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ddc:	d402      	bmi.n	8005de4 <_printf_i+0x188>
 8005dde:	065f      	lsls	r7, r3, #25
 8005de0:	bf48      	it	mi
 8005de2:	b2ad      	uxthmi	r5, r5
 8005de4:	6031      	str	r1, [r6, #0]
 8005de6:	07d9      	lsls	r1, r3, #31
 8005de8:	bf44      	itt	mi
 8005dea:	f043 0320 	orrmi.w	r3, r3, #32
 8005dee:	6023      	strmi	r3, [r4, #0]
 8005df0:	b11d      	cbz	r5, 8005dfa <_printf_i+0x19e>
 8005df2:	2310      	movs	r3, #16
 8005df4:	e7ac      	b.n	8005d50 <_printf_i+0xf4>
 8005df6:	4827      	ldr	r0, [pc, #156]	@ (8005e94 <_printf_i+0x238>)
 8005df8:	e7e9      	b.n	8005dce <_printf_i+0x172>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	f023 0320 	bic.w	r3, r3, #32
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	e7f6      	b.n	8005df2 <_printf_i+0x196>
 8005e04:	4616      	mov	r6, r2
 8005e06:	e7bd      	b.n	8005d84 <_printf_i+0x128>
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	6961      	ldr	r1, [r4, #20]
 8005e0e:	1d18      	adds	r0, r3, #4
 8005e10:	6030      	str	r0, [r6, #0]
 8005e12:	062e      	lsls	r6, r5, #24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	d501      	bpl.n	8005e1c <_printf_i+0x1c0>
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <_printf_i+0x1c6>
 8005e1c:	0668      	lsls	r0, r5, #25
 8005e1e:	d5fb      	bpl.n	8005e18 <_printf_i+0x1bc>
 8005e20:	8019      	strh	r1, [r3, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	4616      	mov	r6, r2
 8005e28:	e7bc      	b.n	8005da4 <_printf_i+0x148>
 8005e2a:	6833      	ldr	r3, [r6, #0]
 8005e2c:	1d1a      	adds	r2, r3, #4
 8005e2e:	6032      	str	r2, [r6, #0]
 8005e30:	681e      	ldr	r6, [r3, #0]
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	2100      	movs	r1, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7fa f9d2 	bl	80001e0 <memchr>
 8005e3c:	b108      	cbz	r0, 8005e42 <_printf_i+0x1e6>
 8005e3e:	1b80      	subs	r0, r0, r6
 8005e40:	6060      	str	r0, [r4, #4]
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	2300      	movs	r3, #0
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4c:	e7aa      	b.n	8005da4 <_printf_i+0x148>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	4632      	mov	r2, r6
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d0ad      	beq.n	8005db8 <_printf_i+0x15c>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	079b      	lsls	r3, r3, #30
 8005e60:	d413      	bmi.n	8005e8a <_printf_i+0x22e>
 8005e62:	68e0      	ldr	r0, [r4, #12]
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	4298      	cmp	r0, r3
 8005e68:	bfb8      	it	lt
 8005e6a:	4618      	movlt	r0, r3
 8005e6c:	e7a6      	b.n	8005dbc <_printf_i+0x160>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4632      	mov	r2, r6
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d09d      	beq.n	8005db8 <_printf_i+0x15c>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	9903      	ldr	r1, [sp, #12]
 8005e82:	1a5b      	subs	r3, r3, r1
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dcf2      	bgt.n	8005e6e <_printf_i+0x212>
 8005e88:	e7eb      	b.n	8005e62 <_printf_i+0x206>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	f104 0619 	add.w	r6, r4, #25
 8005e90:	e7f5      	b.n	8005e7e <_printf_i+0x222>
 8005e92:	bf00      	nop
 8005e94:	08006005 	.word	0x08006005
 8005e98:	08006016 	.word	0x08006016

08005e9c <memmove>:
 8005e9c:	4288      	cmp	r0, r1
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	eb01 0402 	add.w	r4, r1, r2
 8005ea4:	d902      	bls.n	8005eac <memmove+0x10>
 8005ea6:	4284      	cmp	r4, r0
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	d807      	bhi.n	8005ebc <memmove+0x20>
 8005eac:	1e43      	subs	r3, r0, #1
 8005eae:	42a1      	cmp	r1, r4
 8005eb0:	d008      	beq.n	8005ec4 <memmove+0x28>
 8005eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eba:	e7f8      	b.n	8005eae <memmove+0x12>
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	428a      	cmp	r2, r1
 8005ec2:	d100      	bne.n	8005ec6 <memmove+0x2a>
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ece:	e7f7      	b.n	8005ec0 <memmove+0x24>

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	@ (8005eec <_sbrk_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb fb2a 	bl	8001534 <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	200003a8 	.word	0x200003a8

08005ef0 <memcpy>:
 8005ef0:	440a      	add	r2, r1
 8005ef2:	4291      	cmp	r1, r2
 8005ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef8:	d100      	bne.n	8005efc <memcpy+0xc>
 8005efa:	4770      	bx	lr
 8005efc:	b510      	push	{r4, lr}
 8005efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f06:	4291      	cmp	r1, r2
 8005f08:	d1f9      	bne.n	8005efe <memcpy+0xe>
 8005f0a:	bd10      	pop	{r4, pc}

08005f0c <_realloc_r>:
 8005f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	4680      	mov	r8, r0
 8005f12:	4615      	mov	r5, r2
 8005f14:	460c      	mov	r4, r1
 8005f16:	b921      	cbnz	r1, 8005f22 <_realloc_r+0x16>
 8005f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	f7ff bc4b 	b.w	80057b8 <_malloc_r>
 8005f22:	b92a      	cbnz	r2, 8005f30 <_realloc_r+0x24>
 8005f24:	f7ff fbdc 	bl	80056e0 <_free_r>
 8005f28:	2400      	movs	r4, #0
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f30:	f000 f81a 	bl	8005f68 <_malloc_usable_size_r>
 8005f34:	4285      	cmp	r5, r0
 8005f36:	4606      	mov	r6, r0
 8005f38:	d802      	bhi.n	8005f40 <_realloc_r+0x34>
 8005f3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f3e:	d8f4      	bhi.n	8005f2a <_realloc_r+0x1e>
 8005f40:	4629      	mov	r1, r5
 8005f42:	4640      	mov	r0, r8
 8005f44:	f7ff fc38 	bl	80057b8 <_malloc_r>
 8005f48:	4607      	mov	r7, r0
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0ec      	beq.n	8005f28 <_realloc_r+0x1c>
 8005f4e:	42b5      	cmp	r5, r6
 8005f50:	462a      	mov	r2, r5
 8005f52:	4621      	mov	r1, r4
 8005f54:	bf28      	it	cs
 8005f56:	4632      	movcs	r2, r6
 8005f58:	f7ff ffca 	bl	8005ef0 <memcpy>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7ff fbbe 	bl	80056e0 <_free_r>
 8005f64:	463c      	mov	r4, r7
 8005f66:	e7e0      	b.n	8005f2a <_realloc_r+0x1e>

08005f68 <_malloc_usable_size_r>:
 8005f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6c:	1f18      	subs	r0, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfbc      	itt	lt
 8005f72:	580b      	ldrlt	r3, [r1, r0]
 8005f74:	18c0      	addlt	r0, r0, r3
 8005f76:	4770      	bx	lr

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
